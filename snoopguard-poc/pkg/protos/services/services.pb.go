// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.0
// source: protos/services/services.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Group Info
type GroupType int32

const (
	GroupType_CLIENT_SIDE GroupType = 0
	GroupType_SERVER_SIDE GroupType = 1
	GroupType_MLS         GroupType = 2
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "CLIENT_SIDE",
		1: "SERVER_SIDE",
		2: "MLS",
	}
	GroupType_value = map[string]int32{
		"CLIENT_SIDE": 0,
		"SERVER_SIDE": 1,
		"MLS":         2,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_services_services_proto_enumTypes[0].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_protos_services_services_proto_enumTypes[0]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{0}
}

type MessageType int32

const (
	MessageType_TEXT_MESSAGE                    MessageType = 0
	MessageType_SENDER_KEY_DISTRIBUTION_MESSAGE MessageType = 1
	MessageType_CLIENT_SIDE_GROUP_MESSAGE       MessageType = 2
	MessageType_PSEUDONYM_REGISTRATION_MESSAGE  MessageType = 3
	MessageType_VALIDATION_MESSAGE              MessageType = 4
	MessageType_SKIP                            MessageType = 5
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "TEXT_MESSAGE",
		1: "SENDER_KEY_DISTRIBUTION_MESSAGE",
		2: "CLIENT_SIDE_GROUP_MESSAGE",
		3: "PSEUDONYM_REGISTRATION_MESSAGE",
		4: "VALIDATION_MESSAGE",
		5: "SKIP",
	}
	MessageType_value = map[string]int32{
		"TEXT_MESSAGE":                    0,
		"SENDER_KEY_DISTRIBUTION_MESSAGE": 1,
		"CLIENT_SIDE_GROUP_MESSAGE":       2,
		"PSEUDONYM_REGISTRATION_MESSAGE":  3,
		"VALIDATION_MESSAGE":              4,
		"SKIP":                            5,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_services_services_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_protos_services_services_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{1}
}

type ServerEventType int32

const (
	ServerEventType_GROUP_INVITATION         ServerEventType = 0
	ServerEventType_GROUP_ADDITION           ServerEventType = 1
	ServerEventType_GROUP_REMOVAL            ServerEventType = 2
	ServerEventType_GROUP_CHATBOT_INVITATION ServerEventType = 3
	ServerEventType_GROUP_CHATBOT_ADDITION   ServerEventType = 4
	ServerEventType_GROUP_CHATBOT_REMOVAL    ServerEventType = 5
)

// Enum value maps for ServerEventType.
var (
	ServerEventType_name = map[int32]string{
		0: "GROUP_INVITATION",
		1: "GROUP_ADDITION",
		2: "GROUP_REMOVAL",
		3: "GROUP_CHATBOT_INVITATION",
		4: "GROUP_CHATBOT_ADDITION",
		5: "GROUP_CHATBOT_REMOVAL",
	}
	ServerEventType_value = map[string]int32{
		"GROUP_INVITATION":         0,
		"GROUP_ADDITION":           1,
		"GROUP_REMOVAL":            2,
		"GROUP_CHATBOT_INVITATION": 3,
		"GROUP_CHATBOT_ADDITION":   4,
		"GROUP_CHATBOT_REMOVAL":    5,
	}
)

func (x ServerEventType) Enum() *ServerEventType {
	p := new(ServerEventType)
	*p = x
	return p
}

func (x ServerEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_services_services_proto_enumTypes[2].Descriptor()
}

func (ServerEventType) Type() protoreflect.EnumType {
	return &file_protos_services_services_proto_enumTypes[2]
}

func (x ServerEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerEventType.Descriptor instead.
func (ServerEventType) EnumDescriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{2}
}

// Upload PreKey
type UploadPreKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	PreKey   []byte `protobuf:"bytes,2,opt,name=preKey,proto3" json:"preKey,omitempty"`
	PreKeyID uint32 `protobuf:"varint,3,opt,name=preKeyID,proto3" json:"preKeyID,omitempty"`
}

func (x *UploadPreKeyRequest) Reset() {
	*x = UploadPreKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPreKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPreKeyRequest) ProtoMessage() {}

func (x *UploadPreKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPreKeyRequest.ProtoReflect.Descriptor instead.
func (*UploadPreKeyRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{0}
}

func (x *UploadPreKeyRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UploadPreKeyRequest) GetPreKey() []byte {
	if x != nil {
		return x.PreKey
	}
	return nil
}

func (x *UploadPreKeyRequest) GetPreKeyID() uint32 {
	if x != nil {
		return x.PreKeyID
	}
	return 0
}

type UploadPreKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *UploadPreKeyResponse) Reset() {
	*x = UploadPreKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPreKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPreKeyResponse) ProtoMessage() {}

func (x *UploadPreKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPreKeyResponse.ProtoReflect.Descriptor instead.
func (*UploadPreKeyResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{1}
}

func (x *UploadPreKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadPreKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fetch PreKey
type FetchPreKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *FetchPreKeyRequest) Reset() {
	*x = FetchPreKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchPreKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPreKeyRequest) ProtoMessage() {}

func (x *FetchPreKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPreKeyRequest.ProtoReflect.Descriptor instead.
func (*FetchPreKeyRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{2}
}

func (x *FetchPreKeyRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type FetchPreKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreKey       []byte `protobuf:"bytes,1,opt,name=preKey,proto3" json:"preKey,omitempty"`
	PreKeyID     uint32 `protobuf:"varint,2,opt,name=preKeyID,proto3" json:"preKeyID,omitempty"`
	Success      bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,4,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *FetchPreKeyResponse) Reset() {
	*x = FetchPreKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchPreKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPreKeyResponse) ProtoMessage() {}

func (x *FetchPreKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPreKeyResponse.ProtoReflect.Descriptor instead.
func (*FetchPreKeyResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{3}
}

func (x *FetchPreKeyResponse) GetPreKey() []byte {
	if x != nil {
		return x.PreKey
	}
	return nil
}

func (x *FetchPreKeyResponse) GetPreKeyID() uint32 {
	if x != nil {
		return x.PreKeyID
	}
	return 0
}

func (x *FetchPreKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FetchPreKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Upload SignedPreKey
type UploadSignedPreKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	SignedPreKey    []byte `protobuf:"bytes,2,opt,name=signedPreKey,proto3" json:"signedPreKey,omitempty"`
	SignedPreKeySig []byte `protobuf:"bytes,3,opt,name=signedPreKeySig,proto3" json:"signedPreKeySig,omitempty"`
	SignedPreKeyID  uint32 `protobuf:"varint,4,opt,name=signedPreKeyID,proto3" json:"signedPreKeyID,omitempty"`
}

func (x *UploadSignedPreKeyRequest) Reset() {
	*x = UploadSignedPreKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSignedPreKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSignedPreKeyRequest) ProtoMessage() {}

func (x *UploadSignedPreKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSignedPreKeyRequest.ProtoReflect.Descriptor instead.
func (*UploadSignedPreKeyRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{4}
}

func (x *UploadSignedPreKeyRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UploadSignedPreKeyRequest) GetSignedPreKey() []byte {
	if x != nil {
		return x.SignedPreKey
	}
	return nil
}

func (x *UploadSignedPreKeyRequest) GetSignedPreKeySig() []byte {
	if x != nil {
		return x.SignedPreKeySig
	}
	return nil
}

func (x *UploadSignedPreKeyRequest) GetSignedPreKeyID() uint32 {
	if x != nil {
		return x.SignedPreKeyID
	}
	return 0
}

type UploadSignedPreKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *UploadSignedPreKeyResponse) Reset() {
	*x = UploadSignedPreKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSignedPreKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSignedPreKeyResponse) ProtoMessage() {}

func (x *UploadSignedPreKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSignedPreKeyResponse.ProtoReflect.Descriptor instead.
func (*UploadSignedPreKeyResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{5}
}

func (x *UploadSignedPreKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadSignedPreKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fetch SignedPreKey
type FetchSignedPreKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *FetchSignedPreKeyRequest) Reset() {
	*x = FetchSignedPreKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSignedPreKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSignedPreKeyRequest) ProtoMessage() {}

func (x *FetchSignedPreKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSignedPreKeyRequest.ProtoReflect.Descriptor instead.
func (*FetchSignedPreKeyRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{6}
}

func (x *FetchSignedPreKeyRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type FetchSignedPreKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedPreKey    []byte `protobuf:"bytes,1,opt,name=signedPreKey,proto3" json:"signedPreKey,omitempty"`
	SignedPreKeySig []byte `protobuf:"bytes,2,opt,name=signedPreKeySig,proto3" json:"signedPreKeySig,omitempty"`
	SignedPreKeyID  uint32 `protobuf:"varint,3,opt,name=signedPreKeyID,proto3" json:"signedPreKeyID,omitempty"`
	Success         bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage    string `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *FetchSignedPreKeyResponse) Reset() {
	*x = FetchSignedPreKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSignedPreKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSignedPreKeyResponse) ProtoMessage() {}

func (x *FetchSignedPreKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSignedPreKeyResponse.ProtoReflect.Descriptor instead.
func (*FetchSignedPreKeyResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{7}
}

func (x *FetchSignedPreKeyResponse) GetSignedPreKey() []byte {
	if x != nil {
		return x.SignedPreKey
	}
	return nil
}

func (x *FetchSignedPreKeyResponse) GetSignedPreKeySig() []byte {
	if x != nil {
		return x.SignedPreKeySig
	}
	return nil
}

func (x *FetchSignedPreKeyResponse) GetSignedPreKeyID() uint32 {
	if x != nil {
		return x.SignedPreKeyID
	}
	return 0
}

func (x *FetchSignedPreKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FetchSignedPreKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fetch IdentityKey
type FetchIdentityKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *FetchIdentityKeyRequest) Reset() {
	*x = FetchIdentityKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchIdentityKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchIdentityKeyRequest) ProtoMessage() {}

func (x *FetchIdentityKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchIdentityKeyRequest.ProtoReflect.Descriptor instead.
func (*FetchIdentityKeyRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{8}
}

func (x *FetchIdentityKeyRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type FetchIdentityKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey  []byte `protobuf:"bytes,1,opt,name=identityKey,proto3" json:"identityKey,omitempty"`
	Success      bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *FetchIdentityKeyResponse) Reset() {
	*x = FetchIdentityKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchIdentityKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchIdentityKeyResponse) ProtoMessage() {}

func (x *FetchIdentityKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchIdentityKeyResponse.ProtoReflect.Descriptor instead.
func (*FetchIdentityKeyResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{9}
}

func (x *FetchIdentityKeyResponse) GetIdentityKey() []byte {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *FetchIdentityKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FetchIdentityKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Upload MLSKeyPackage
type UploadMLSKeyPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	MlsKeyPackage   []byte `protobuf:"bytes,2,opt,name=mlsKeyPackage,proto3" json:"mlsKeyPackage,omitempty"`
	MlsKeyPackageId uint32 `protobuf:"varint,3,opt,name=mlsKeyPackageId,proto3" json:"mlsKeyPackageId,omitempty"`
}

func (x *UploadMLSKeyPackageRequest) Reset() {
	*x = UploadMLSKeyPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMLSKeyPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMLSKeyPackageRequest) ProtoMessage() {}

func (x *UploadMLSKeyPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMLSKeyPackageRequest.ProtoReflect.Descriptor instead.
func (*UploadMLSKeyPackageRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{10}
}

func (x *UploadMLSKeyPackageRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UploadMLSKeyPackageRequest) GetMlsKeyPackage() []byte {
	if x != nil {
		return x.MlsKeyPackage
	}
	return nil
}

func (x *UploadMLSKeyPackageRequest) GetMlsKeyPackageId() uint32 {
	if x != nil {
		return x.MlsKeyPackageId
	}
	return 0
}

type UploadMLSKeyPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *UploadMLSKeyPackageResponse) Reset() {
	*x = UploadMLSKeyPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMLSKeyPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMLSKeyPackageResponse) ProtoMessage() {}

func (x *UploadMLSKeyPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMLSKeyPackageResponse.ProtoReflect.Descriptor instead.
func (*UploadMLSKeyPackageResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{11}
}

func (x *UploadMLSKeyPackageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadMLSKeyPackageResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Fetch MLSKeyPackage
type FetchMLSKeyPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *FetchMLSKeyPackageRequest) Reset() {
	*x = FetchMLSKeyPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMLSKeyPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMLSKeyPackageRequest) ProtoMessage() {}

func (x *FetchMLSKeyPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMLSKeyPackageRequest.ProtoReflect.Descriptor instead.
func (*FetchMLSKeyPackageRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{12}
}

func (x *FetchMLSKeyPackageRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type FetchMLSKeyPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsKeyPackage   []byte `protobuf:"bytes,1,opt,name=mlsKeyPackage,proto3" json:"mlsKeyPackage,omitempty"`
	MlsKeyPackageId uint32 `protobuf:"varint,2,opt,name=mlsKeyPackageId,proto3" json:"mlsKeyPackageId,omitempty"`
	Success         bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage    string `protobuf:"bytes,4,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *FetchMLSKeyPackageResponse) Reset() {
	*x = FetchMLSKeyPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMLSKeyPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMLSKeyPackageResponse) ProtoMessage() {}

func (x *FetchMLSKeyPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMLSKeyPackageResponse.ProtoReflect.Descriptor instead.
func (*FetchMLSKeyPackageResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{13}
}

func (x *FetchMLSKeyPackageResponse) GetMlsKeyPackage() []byte {
	if x != nil {
		return x.MlsKeyPackage
	}
	return nil
}

func (x *FetchMLSKeyPackageResponse) GetMlsKeyPackageId() uint32 {
	if x != nil {
		return x.MlsKeyPackageId
	}
	return 0
}

func (x *FetchMLSKeyPackageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FetchMLSKeyPackageResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// User Info
type SetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID            string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IdentityKeyPublic []byte `protobuf:"bytes,2,opt,name=identityKeyPublic,proto3" json:"identityKeyPublic,omitempty"`
	RegistrationID    uint32 `protobuf:"varint,3,opt,name=registrationID,proto3" json:"registrationID,omitempty"`
}

func (x *SetUserRequest) Reset() {
	*x = SetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserRequest) ProtoMessage() {}

func (x *SetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserRequest.ProtoReflect.Descriptor instead.
func (*SetUserRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{14}
}

func (x *SetUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetUserRequest) GetIdentityKeyPublic() []byte {
	if x != nil {
		return x.IdentityKeyPublic
	}
	return nil
}

func (x *SetUserRequest) GetRegistrationID() uint32 {
	if x != nil {
		return x.RegistrationID
	}
	return 0
}

type SetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *SetUserResponse) Reset() {
	*x = SetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserResponse) ProtoMessage() {}

func (x *SetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserResponse.ProtoReflect.Descriptor instead.
func (*SetUserResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{15}
}

func (x *SetUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetUserResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID            string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IdentityKeyPublic []byte `protobuf:"bytes,2,opt,name=identityKeyPublic,proto3" json:"identityKeyPublic,omitempty"`
	RegistrationID    uint32 `protobuf:"varint,3,opt,name=registrationID,proto3" json:"registrationID,omitempty"`
	Success           bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage      string `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserResponse) GetIdentityKeyPublic() []byte {
	if x != nil {
		return x.IdentityKeyPublic
	}
	return nil
}

func (x *GetUserResponse) GetRegistrationID() uint32 {
	if x != nil {
		return x.RegistrationID
	}
	return 0
}

func (x *GetUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetUserResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Chatbot Info
type SetChatbotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatbotID         string `protobuf:"bytes,1,opt,name=chatbotID,proto3" json:"chatbotID,omitempty"`
	IdentityKeyPublic []byte `protobuf:"bytes,2,opt,name=identityKeyPublic,proto3" json:"identityKeyPublic,omitempty"`
	RegistrationID    uint32 `protobuf:"varint,3,opt,name=registrationID,proto3" json:"registrationID,omitempty"`
}

func (x *SetChatbotRequest) Reset() {
	*x = SetChatbotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatbotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatbotRequest) ProtoMessage() {}

func (x *SetChatbotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatbotRequest.ProtoReflect.Descriptor instead.
func (*SetChatbotRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{18}
}

func (x *SetChatbotRequest) GetChatbotID() string {
	if x != nil {
		return x.ChatbotID
	}
	return ""
}

func (x *SetChatbotRequest) GetIdentityKeyPublic() []byte {
	if x != nil {
		return x.IdentityKeyPublic
	}
	return nil
}

func (x *SetChatbotRequest) GetRegistrationID() uint32 {
	if x != nil {
		return x.RegistrationID
	}
	return 0
}

type SetChatbotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *SetChatbotResponse) Reset() {
	*x = SetChatbotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatbotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatbotResponse) ProtoMessage() {}

func (x *SetChatbotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatbotResponse.ProtoReflect.Descriptor instead.
func (*SetChatbotResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{19}
}

func (x *SetChatbotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetChatbotResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetChatbotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatbotID string `protobuf:"bytes,1,opt,name=chatbotID,proto3" json:"chatbotID,omitempty"`
}

func (x *GetChatbotRequest) Reset() {
	*x = GetChatbotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatbotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatbotRequest) ProtoMessage() {}

func (x *GetChatbotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatbotRequest.ProtoReflect.Descriptor instead.
func (*GetChatbotRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{20}
}

func (x *GetChatbotRequest) GetChatbotID() string {
	if x != nil {
		return x.ChatbotID
	}
	return ""
}

type GetChatbotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatbotID         string `protobuf:"bytes,1,opt,name=chatbotID,proto3" json:"chatbotID,omitempty"`
	IdentityKeyPublic []byte `protobuf:"bytes,2,opt,name=identityKeyPublic,proto3" json:"identityKeyPublic,omitempty"`
	RegistrationID    uint32 `protobuf:"varint,3,opt,name=registrationID,proto3" json:"registrationID,omitempty"`
	Success           bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage      string `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *GetChatbotResponse) Reset() {
	*x = GetChatbotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatbotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatbotResponse) ProtoMessage() {}

func (x *GetChatbotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatbotResponse.ProtoReflect.Descriptor instead.
func (*GetChatbotResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{21}
}

func (x *GetChatbotResponse) GetChatbotID() string {
	if x != nil {
		return x.ChatbotID
	}
	return ""
}

func (x *GetChatbotResponse) GetIdentityKeyPublic() []byte {
	if x != nil {
		return x.IdentityKeyPublic
	}
	return nil
}

func (x *GetChatbotResponse) GetRegistrationID() uint32 {
	if x != nil {
		return x.RegistrationID
	}
	return 0
}

func (x *GetChatbotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetChatbotResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type CreateGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorID string    `protobuf:"bytes,1,opt,name=initiatorID,proto3" json:"initiatorID,omitempty"`
	GroupType   GroupType `protobuf:"varint,2,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{22}
}

func (x *CreateGroupRequest) GetInitiatorID() string {
	if x != nil {
		return x.InitiatorID
	}
	return ""
}

func (x *CreateGroupRequest) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

type CreateGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID      string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Success      bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *CreateGroupResponse) Reset() {
	*x = CreateGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResponse) ProtoMessage() {}

func (x *CreateGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{23}
}

func (x *CreateGroupResponse) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *CreateGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateGroupResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GetGroupRequest) Reset() {
	*x = GetGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequest) ProtoMessage() {}

func (x *GetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{24}
}

func (x *GetGroupRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

type GetGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID        string    `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ParticipantIDs []string  `protobuf:"bytes,2,rep,name=participantIDs,proto3" json:"participantIDs,omitempty"`
	GroupType      GroupType `protobuf:"varint,3,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
	Success        bool      `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage   string    `protobuf:"bytes,5,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *GetGroupResponse) Reset() {
	*x = GetGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResponse) ProtoMessage() {}

func (x *GetGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResponse.ProtoReflect.Descriptor instead.
func (*GetGroupResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{25}
}

func (x *GetGroupResponse) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GetGroupResponse) GetParticipantIDs() []string {
	if x != nil {
		return x.ParticipantIDs
	}
	return nil
}

func (x *GetGroupResponse) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

func (x *GetGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetGroupResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type InviteMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID                    string                    `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	InitiatorID                string                    `protobuf:"bytes,2,opt,name=initiatorID,proto3" json:"initiatorID,omitempty"`
	InvitedID                  string                    `protobuf:"bytes,3,opt,name=invitedID,proto3" json:"invitedID,omitempty"`
	TreeKEMGroupInitKey        *TreeKEMGroupInitKey      `protobuf:"bytes,4,opt,name=treeKEMGroupInitKey,proto3" json:"treeKEMGroupInitKey,omitempty"`
	TreeKEMUserAdd             *TreeKEMUserAdd           `protobuf:"bytes,5,opt,name=treeKEMUserAdd,proto3" json:"treeKEMUserAdd,omitempty"`
	TreeKEMInitLeaf            []byte                    `protobuf:"bytes,6,opt,name=treeKEMInitLeaf,proto3" json:"treeKEMInitLeaf,omitempty"`
	ChatbotPubKeys             map[string][]byte         `protobuf:"bytes,7,rep,name=chatbotPubKeys,proto3" json:"chatbotPubKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChatbotSignPubKeys         map[string][]byte         `protobuf:"bytes,8,rep,name=chatbotSignPubKeys,proto3" json:"chatbotSignPubKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastTreeKemRootCiphertexts *ECKEMCipherTextStringMap `protobuf:"bytes,9,opt,name=lastTreeKemRootCiphertexts,proto3" json:"lastTreeKemRootCiphertexts,omitempty"`
	MlsWelcomeMessage          []byte                    `protobuf:"bytes,10,opt,name=mlsWelcomeMessage,proto3" json:"mlsWelcomeMessage,omitempty"`
	MlsKeyPackageID            uint32                    `protobuf:"varint,11,opt,name=mlsKeyPackageID,proto3" json:"mlsKeyPackageID,omitempty"`
	MlsUserAdd                 []byte                    `protobuf:"bytes,12,opt,name=mlsUserAdd,proto3" json:"mlsUserAdd,omitempty"`
	MlsAddCommit               []byte                    `protobuf:"bytes,13,opt,name=mlsAddCommit,proto3" json:"mlsAddCommit,omitempty"`
}

func (x *InviteMemberRequest) Reset() {
	*x = InviteMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteMemberRequest) ProtoMessage() {}

func (x *InviteMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteMemberRequest.ProtoReflect.Descriptor instead.
func (*InviteMemberRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{26}
}

func (x *InviteMemberRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *InviteMemberRequest) GetInitiatorID() string {
	if x != nil {
		return x.InitiatorID
	}
	return ""
}

func (x *InviteMemberRequest) GetInvitedID() string {
	if x != nil {
		return x.InvitedID
	}
	return ""
}

func (x *InviteMemberRequest) GetTreeKEMGroupInitKey() *TreeKEMGroupInitKey {
	if x != nil {
		return x.TreeKEMGroupInitKey
	}
	return nil
}

func (x *InviteMemberRequest) GetTreeKEMUserAdd() *TreeKEMUserAdd {
	if x != nil {
		return x.TreeKEMUserAdd
	}
	return nil
}

func (x *InviteMemberRequest) GetTreeKEMInitLeaf() []byte {
	if x != nil {
		return x.TreeKEMInitLeaf
	}
	return nil
}

func (x *InviteMemberRequest) GetChatbotPubKeys() map[string][]byte {
	if x != nil {
		return x.ChatbotPubKeys
	}
	return nil
}

func (x *InviteMemberRequest) GetChatbotSignPubKeys() map[string][]byte {
	if x != nil {
		return x.ChatbotSignPubKeys
	}
	return nil
}

func (x *InviteMemberRequest) GetLastTreeKemRootCiphertexts() *ECKEMCipherTextStringMap {
	if x != nil {
		return x.LastTreeKemRootCiphertexts
	}
	return nil
}

func (x *InviteMemberRequest) GetMlsWelcomeMessage() []byte {
	if x != nil {
		return x.MlsWelcomeMessage
	}
	return nil
}

func (x *InviteMemberRequest) GetMlsKeyPackageID() uint32 {
	if x != nil {
		return x.MlsKeyPackageID
	}
	return 0
}

func (x *InviteMemberRequest) GetMlsUserAdd() []byte {
	if x != nil {
		return x.MlsUserAdd
	}
	return nil
}

func (x *InviteMemberRequest) GetMlsAddCommit() []byte {
	if x != nil {
		return x.MlsAddCommit
	}
	return nil
}

type InviteMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *InviteMemberResponse) Reset() {
	*x = InviteMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteMemberResponse) ProtoMessage() {}

func (x *InviteMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteMemberResponse.ProtoReflect.Descriptor instead.
func (*InviteMemberResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{27}
}

func (x *InviteMemberResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InviteMemberResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type RemoveMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID         string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	InitiatorID     string `protobuf:"bytes,2,opt,name=initiatorID,proto3" json:"initiatorID,omitempty"`
	RemovedID       string `protobuf:"bytes,3,opt,name=removedID,proto3" json:"removedID,omitempty"`
	MlsRemove       []byte `protobuf:"bytes,4,opt,name=mlsRemove,proto3" json:"mlsRemove,omitempty"`
	MlsRemoveCommit []byte `protobuf:"bytes,5,opt,name=mlsRemoveCommit,proto3" json:"mlsRemoveCommit,omitempty"`
}

func (x *RemoveMemberRequest) Reset() {
	*x = RemoveMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMemberRequest) ProtoMessage() {}

func (x *RemoveMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveMemberRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveMemberRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *RemoveMemberRequest) GetInitiatorID() string {
	if x != nil {
		return x.InitiatorID
	}
	return ""
}

func (x *RemoveMemberRequest) GetRemovedID() string {
	if x != nil {
		return x.RemovedID
	}
	return ""
}

func (x *RemoveMemberRequest) GetMlsRemove() []byte {
	if x != nil {
		return x.MlsRemove
	}
	return nil
}

func (x *RemoveMemberRequest) GetMlsRemoveCommit() []byte {
	if x != nil {
		return x.MlsRemoveCommit
	}
	return nil
}

type RemoveMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *RemoveMemberResponse) Reset() {
	*x = RemoveMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMemberResponse) ProtoMessage() {}

func (x *RemoveMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveMemberResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveMemberResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveMemberResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type InviteChatbotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID            string           `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	InitiatorID        string           `protobuf:"bytes,2,opt,name=initiatorID,proto3" json:"initiatorID,omitempty"`
	InvitedID          string           `protobuf:"bytes,3,opt,name=invitedID,proto3" json:"invitedID,omitempty"`
	IsIGA              bool             `protobuf:"varint,4,opt,name=isIGA,proto3" json:"isIGA,omitempty"`
	IsPseudo           bool             `protobuf:"varint,5,opt,name=isPseudo,proto3" json:"isPseudo,omitempty"`
	TreekemRootPub     []byte           `protobuf:"bytes,6,opt,name=treekemRootPub,proto3" json:"treekemRootPub,omitempty"`
	TreekemRootSignPub []byte           `protobuf:"bytes,7,opt,name=treekemRootSignPub,proto3" json:"treekemRootSignPub,omitempty"`
	ChatbotInitLeaf    []byte           `protobuf:"bytes,8,opt,name=chatbotInitLeaf,proto3" json:"chatbotInitLeaf,omitempty"`
	ChatbotCipherText  *ECKEMCipherText `protobuf:"bytes,9,opt,name=chatbotCipherText,proto3" json:"chatbotCipherText,omitempty"`
	MlsWelcomeMessage  []byte           `protobuf:"bytes,10,opt,name=mlsWelcomeMessage,proto3" json:"mlsWelcomeMessage,omitempty"`
	MlsKeyPackageID    uint32           `protobuf:"varint,11,opt,name=mlsKeyPackageID,proto3" json:"mlsKeyPackageID,omitempty"`
	MlsUserAdd         []byte           `protobuf:"bytes,12,opt,name=mlsUserAdd,proto3" json:"mlsUserAdd,omitempty"`
	MlsAddCommit       []byte           `protobuf:"bytes,13,opt,name=mlsAddCommit,proto3" json:"mlsAddCommit,omitempty"`
}

func (x *InviteChatbotRequest) Reset() {
	*x = InviteChatbotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteChatbotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteChatbotRequest) ProtoMessage() {}

func (x *InviteChatbotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteChatbotRequest.ProtoReflect.Descriptor instead.
func (*InviteChatbotRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{30}
}

func (x *InviteChatbotRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *InviteChatbotRequest) GetInitiatorID() string {
	if x != nil {
		return x.InitiatorID
	}
	return ""
}

func (x *InviteChatbotRequest) GetInvitedID() string {
	if x != nil {
		return x.InvitedID
	}
	return ""
}

func (x *InviteChatbotRequest) GetIsIGA() bool {
	if x != nil {
		return x.IsIGA
	}
	return false
}

func (x *InviteChatbotRequest) GetIsPseudo() bool {
	if x != nil {
		return x.IsPseudo
	}
	return false
}

func (x *InviteChatbotRequest) GetTreekemRootPub() []byte {
	if x != nil {
		return x.TreekemRootPub
	}
	return nil
}

func (x *InviteChatbotRequest) GetTreekemRootSignPub() []byte {
	if x != nil {
		return x.TreekemRootSignPub
	}
	return nil
}

func (x *InviteChatbotRequest) GetChatbotInitLeaf() []byte {
	if x != nil {
		return x.ChatbotInitLeaf
	}
	return nil
}

func (x *InviteChatbotRequest) GetChatbotCipherText() *ECKEMCipherText {
	if x != nil {
		return x.ChatbotCipherText
	}
	return nil
}

func (x *InviteChatbotRequest) GetMlsWelcomeMessage() []byte {
	if x != nil {
		return x.MlsWelcomeMessage
	}
	return nil
}

func (x *InviteChatbotRequest) GetMlsKeyPackageID() uint32 {
	if x != nil {
		return x.MlsKeyPackageID
	}
	return 0
}

func (x *InviteChatbotRequest) GetMlsUserAdd() []byte {
	if x != nil {
		return x.MlsUserAdd
	}
	return nil
}

func (x *InviteChatbotRequest) GetMlsAddCommit() []byte {
	if x != nil {
		return x.MlsAddCommit
	}
	return nil
}

type InviteChatbotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *InviteChatbotResponse) Reset() {
	*x = InviteChatbotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteChatbotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteChatbotResponse) ProtoMessage() {}

func (x *InviteChatbotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteChatbotResponse.ProtoReflect.Descriptor instead.
func (*InviteChatbotResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{31}
}

func (x *InviteChatbotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InviteChatbotResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type RemoveChatbotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID         string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	InitiatorID     string `protobuf:"bytes,2,opt,name=initiatorID,proto3" json:"initiatorID,omitempty"`
	RemovedID       string `protobuf:"bytes,3,opt,name=removedID,proto3" json:"removedID,omitempty"`
	MlsRemove       []byte `protobuf:"bytes,4,opt,name=mlsRemove,proto3" json:"mlsRemove,omitempty"`
	MlsRemoveCommit []byte `protobuf:"bytes,5,opt,name=mlsRemoveCommit,proto3" json:"mlsRemoveCommit,omitempty"`
}

func (x *RemoveChatbotRequest) Reset() {
	*x = RemoveChatbotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChatbotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatbotRequest) ProtoMessage() {}

func (x *RemoveChatbotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatbotRequest.ProtoReflect.Descriptor instead.
func (*RemoveChatbotRequest) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveChatbotRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *RemoveChatbotRequest) GetInitiatorID() string {
	if x != nil {
		return x.InitiatorID
	}
	return ""
}

func (x *RemoveChatbotRequest) GetRemovedID() string {
	if x != nil {
		return x.RemovedID
	}
	return ""
}

func (x *RemoveChatbotRequest) GetMlsRemove() []byte {
	if x != nil {
		return x.MlsRemove
	}
	return nil
}

func (x *RemoveChatbotRequest) GetMlsRemoveCommit() []byte {
	if x != nil {
		return x.MlsRemoveCommit
	}
	return nil
}

type RemoveChatbotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *RemoveChatbotResponse) Reset() {
	*x = RemoveChatbotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChatbotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatbotResponse) ProtoMessage() {}

func (x *RemoveChatbotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatbotResponse.ProtoReflect.Descriptor instead.
func (*RemoveChatbotResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{33}
}

func (x *RemoveChatbotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveChatbotResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type MessageStreamInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *MessageStreamInit) Reset() {
	*x = MessageStreamInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStreamInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStreamInit) ProtoMessage() {}

func (x *MessageStreamInit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStreamInit.ProtoReflect.Descriptor instead.
func (*MessageStreamInit) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{34}
}

func (x *MessageStreamInit) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{35}
}

func (x *SendMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SendMessageResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=Services.MessageType" json:"messageType,omitempty"`
	Message     []byte      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ChatbotIDs  []string    `protobuf:"bytes,3,rep,name=chatbotIDs,proto3" json:"chatbotIDs,omitempty"`
	Signature   []byte      `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{36}
}

func (x *Message) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_TEXT_MESSAGE
}

func (x *Message) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Message) GetChatbotIDs() []string {
	if x != nil {
		return x.ChatbotIDs
	}
	return nil
}

func (x *Message) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ChatbotMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatbotID        string          `protobuf:"bytes,1,opt,name=chatbotID,proto3" json:"chatbotID,omitempty"`
	MessageWrapper   *MessageWrapper `protobuf:"bytes,2,opt,name=messageWrapper,proto3" json:"messageWrapper,omitempty"`
	UseNormalMessage bool            `protobuf:"varint,3,opt,name=useNormalMessage,proto3" json:"useNormalMessage,omitempty"`
	ShouldSend       bool            `protobuf:"varint,4,opt,name=shouldSend,proto3" json:"shouldSend,omitempty"`
}

func (x *ChatbotMessage) Reset() {
	*x = ChatbotMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatbotMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatbotMessage) ProtoMessage() {}

func (x *ChatbotMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatbotMessage.ProtoReflect.Descriptor instead.
func (*ChatbotMessage) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{37}
}

func (x *ChatbotMessage) GetChatbotID() string {
	if x != nil {
		return x.ChatbotID
	}
	return ""
}

func (x *ChatbotMessage) GetMessageWrapper() *MessageWrapper {
	if x != nil {
		return x.MessageWrapper
	}
	return nil
}

func (x *ChatbotMessage) GetUseNormalMessage() bool {
	if x != nil {
		return x.UseNormalMessage
	}
	return false
}

func (x *ChatbotMessage) GetShouldSend() bool {
	if x != nil {
		return x.ShouldSend
	}
	return false
}

type ClientSideGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID     string      `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	MessageType MessageType `protobuf:"varint,2,opt,name=messageType,proto3,enum=Services.MessageType" json:"messageType,omitempty"`
	Message     []byte      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClientSideGroupMessage) Reset() {
	*x = ClientSideGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSideGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSideGroupMessage) ProtoMessage() {}

func (x *ClientSideGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSideGroupMessage.ProtoReflect.Descriptor instead.
func (*ClientSideGroupMessage) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{38}
}

func (x *ClientSideGroupMessage) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *ClientSideGroupMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_TEXT_MESSAGE
}

func (x *ClientSideGroupMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type SenderKeyDistributionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID                      string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	SenderKeyDistributionMessage []byte `protobuf:"bytes,2,opt,name=senderKeyDistributionMessage,proto3" json:"senderKeyDistributionMessage,omitempty"`
	BounceBack                   bool   `protobuf:"varint,3,opt,name=bounceBack,proto3" json:"bounceBack,omitempty"`
}

func (x *SenderKeyDistributionMessage) Reset() {
	*x = SenderKeyDistributionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderKeyDistributionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderKeyDistributionMessage) ProtoMessage() {}

func (x *SenderKeyDistributionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderKeyDistributionMessage.ProtoReflect.Descriptor instead.
func (*SenderKeyDistributionMessage) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{39}
}

func (x *SenderKeyDistributionMessage) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *SenderKeyDistributionMessage) GetSenderKeyDistributionMessage() []byte {
	if x != nil {
		return x.SenderKeyDistributionMessage
	}
	return nil
}

func (x *SenderKeyDistributionMessage) GetBounceBack() bool {
	if x != nil {
		return x.BounceBack
	}
	return false
}

type PseudonymRegistrationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID       string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	PseudoUserID  string `protobuf:"bytes,2,opt,name=pseudoUserID,proto3" json:"pseudoUserID,omitempty"`
	SigningKeyPub []byte `protobuf:"bytes,3,opt,name=signingKeyPub,proto3" json:"signingKeyPub,omitempty"`
}

func (x *PseudonymRegistrationMessage) Reset() {
	*x = PseudonymRegistrationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PseudonymRegistrationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PseudonymRegistrationMessage) ProtoMessage() {}

func (x *PseudonymRegistrationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PseudonymRegistrationMessage.ProtoReflect.Descriptor instead.
func (*PseudonymRegistrationMessage) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{40}
}

func (x *PseudonymRegistrationMessage) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *PseudonymRegistrationMessage) GetPseudoUserID() string {
	if x != nil {
		return x.PseudoUserID
	}
	return ""
}

func (x *PseudonymRegistrationMessage) GetSigningKeyPub() []byte {
	if x != nil {
		return x.SigningKeyPub
	}
	return nil
}

type ValidationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID             string      `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	PreviousMessage     []byte      `protobuf:"bytes,2,opt,name=previousMessage,proto3" json:"previousMessage,omitempty"`
	PreviousMessageType MessageType `protobuf:"varint,3,opt,name=previousMessageType,proto3,enum=Services.MessageType" json:"previousMessageType,omitempty"`
}

func (x *ValidationMessage) Reset() {
	*x = ValidationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationMessage) ProtoMessage() {}

func (x *ValidationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationMessage.ProtoReflect.Descriptor instead.
func (*ValidationMessage) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{41}
}

func (x *ValidationMessage) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *ValidationMessage) GetPreviousMessage() []byte {
	if x != nil {
		return x.PreviousMessage
	}
	return nil
}

func (x *ValidationMessage) GetPreviousMessageType() MessageType {
	if x != nil {
		return x.PreviousMessageType
	}
	return MessageType_TEXT_MESSAGE
}

type MessageWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID             string                             `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	RecipientID          string                             `protobuf:"bytes,2,opt,name=recipientID,proto3" json:"recipientID,omitempty"`
	EncryptedMessage     []byte                             `protobuf:"bytes,3,opt,name=encryptedMessage,proto3" json:"encryptedMessage,omitempty"`
	ChatbotMessages      []*ChatbotMessage                  `protobuf:"bytes,4,rep,name=chatbotMessages,proto3" json:"chatbotMessages,omitempty"`
	ChatbotIds           []string                           `protobuf:"bytes,5,rep,name=ChatbotIds,proto3" json:"ChatbotIds,omitempty"`
	HasPreKey            bool                               `protobuf:"varint,6,opt,name=hasPreKey,proto3" json:"hasPreKey,omitempty"`
	IsIGA                bool                               `protobuf:"varint,7,opt,name=isIGA,proto3" json:"isIGA,omitempty"`
	IsPseudo             bool                               `protobuf:"varint,8,opt,name=isPseudo,proto3" json:"isPseudo,omitempty"`
	TreeKEMKeyUpdatePack *TreeKEMKeyUpdatePack              `protobuf:"bytes,9,opt,name=treeKEMKeyUpdatePack,proto3" json:"treeKEMKeyUpdatePack,omitempty"`
	ChatbotKeyUpdatePack *MultiTreeKEMExternalKeyUpdatePack `protobuf:"bytes,10,opt,name=chatbotKeyUpdatePack,proto3" json:"chatbotKeyUpdatePack,omitempty"`
	MlsCommit            []byte                             `protobuf:"bytes,11,opt,name=mlsCommit,proto3" json:"mlsCommit,omitempty"`
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{42}
}

func (x *MessageWrapper) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *MessageWrapper) GetRecipientID() string {
	if x != nil {
		return x.RecipientID
	}
	return ""
}

func (x *MessageWrapper) GetEncryptedMessage() []byte {
	if x != nil {
		return x.EncryptedMessage
	}
	return nil
}

func (x *MessageWrapper) GetChatbotMessages() []*ChatbotMessage {
	if x != nil {
		return x.ChatbotMessages
	}
	return nil
}

func (x *MessageWrapper) GetChatbotIds() []string {
	if x != nil {
		return x.ChatbotIds
	}
	return nil
}

func (x *MessageWrapper) GetHasPreKey() bool {
	if x != nil {
		return x.HasPreKey
	}
	return false
}

func (x *MessageWrapper) GetIsIGA() bool {
	if x != nil {
		return x.IsIGA
	}
	return false
}

func (x *MessageWrapper) GetIsPseudo() bool {
	if x != nil {
		return x.IsPseudo
	}
	return false
}

func (x *MessageWrapper) GetTreeKEMKeyUpdatePack() *TreeKEMKeyUpdatePack {
	if x != nil {
		return x.TreeKEMKeyUpdatePack
	}
	return nil
}

func (x *MessageWrapper) GetChatbotKeyUpdatePack() *MultiTreeKEMExternalKeyUpdatePack {
	if x != nil {
		return x.ChatbotKeyUpdatePack
	}
	return nil
}

func (x *MessageWrapper) GetMlsCommit() []byte {
	if x != nil {
		return x.MlsCommit
	}
	return nil
}

type ServerEventStreamInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *ServerEventStreamInit) Reset() {
	*x = ServerEventStreamInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerEventStreamInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEventStreamInit) ProtoMessage() {}

func (x *ServerEventStreamInit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEventStreamInit.ProtoReflect.Descriptor instead.
func (*ServerEventStreamInit) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{43}
}

func (x *ServerEventStreamInit) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GroupInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID                   string                    `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	GroupID                    string                    `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ParticipantIDs             []string                  `protobuf:"bytes,3,rep,name=participantIDs,proto3" json:"participantIDs,omitempty"`
	ChatbotIDs                 []string                  `protobuf:"bytes,4,rep,name=chatbotIDs,proto3" json:"chatbotIDs,omitempty"`
	ChatbotIsIGA               map[string]bool           `protobuf:"bytes,5,rep,name=chatbotIsIGA,proto3" json:"chatbotIsIGA,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChatbotIsPseudo            map[string]bool           `protobuf:"bytes,6,rep,name=chatbotIsPseudo,proto3" json:"chatbotIsPseudo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TreeKEMGroupInitKey        *TreeKEMGroupInitKey      `protobuf:"bytes,7,opt,name=treeKEMGroupInitKey,proto3" json:"treeKEMGroupInitKey,omitempty"`
	TreeKEMInitLeaf            []byte                    `protobuf:"bytes,8,opt,name=treeKEMInitLeaf,proto3" json:"treeKEMInitLeaf,omitempty"`
	ChatbotPubKeys             map[string][]byte         `protobuf:"bytes,9,rep,name=chatbotPubKeys,proto3" json:"chatbotPubKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChatbotSignPubKeys         map[string][]byte         `protobuf:"bytes,10,rep,name=chatbotSignPubKeys,proto3" json:"chatbotSignPubKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastTreeKemRootCiphertexts *ECKEMCipherTextStringMap `protobuf:"bytes,11,opt,name=lastTreeKemRootCiphertexts,proto3" json:"lastTreeKemRootCiphertexts,omitempty"`
	MlsWelcomeMessage          []byte                    `protobuf:"bytes,12,opt,name=MlsWelcomeMessage,proto3" json:"MlsWelcomeMessage,omitempty"`
	MlsKeyPackageID            uint32                    `protobuf:"varint,13,opt,name=MlsKeyPackageID,proto3" json:"MlsKeyPackageID,omitempty"`
	GroupType                  GroupType                 `protobuf:"varint,14,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
}

func (x *GroupInvitation) Reset() {
	*x = GroupInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInvitation) ProtoMessage() {}

func (x *GroupInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInvitation.ProtoReflect.Descriptor instead.
func (*GroupInvitation) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{44}
}

func (x *GroupInvitation) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *GroupInvitation) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupInvitation) GetParticipantIDs() []string {
	if x != nil {
		return x.ParticipantIDs
	}
	return nil
}

func (x *GroupInvitation) GetChatbotIDs() []string {
	if x != nil {
		return x.ChatbotIDs
	}
	return nil
}

func (x *GroupInvitation) GetChatbotIsIGA() map[string]bool {
	if x != nil {
		return x.ChatbotIsIGA
	}
	return nil
}

func (x *GroupInvitation) GetChatbotIsPseudo() map[string]bool {
	if x != nil {
		return x.ChatbotIsPseudo
	}
	return nil
}

func (x *GroupInvitation) GetTreeKEMGroupInitKey() *TreeKEMGroupInitKey {
	if x != nil {
		return x.TreeKEMGroupInitKey
	}
	return nil
}

func (x *GroupInvitation) GetTreeKEMInitLeaf() []byte {
	if x != nil {
		return x.TreeKEMInitLeaf
	}
	return nil
}

func (x *GroupInvitation) GetChatbotPubKeys() map[string][]byte {
	if x != nil {
		return x.ChatbotPubKeys
	}
	return nil
}

func (x *GroupInvitation) GetChatbotSignPubKeys() map[string][]byte {
	if x != nil {
		return x.ChatbotSignPubKeys
	}
	return nil
}

func (x *GroupInvitation) GetLastTreeKemRootCiphertexts() *ECKEMCipherTextStringMap {
	if x != nil {
		return x.LastTreeKemRootCiphertexts
	}
	return nil
}

func (x *GroupInvitation) GetMlsWelcomeMessage() []byte {
	if x != nil {
		return x.MlsWelcomeMessage
	}
	return nil
}

func (x *GroupInvitation) GetMlsKeyPackageID() uint32 {
	if x != nil {
		return x.MlsKeyPackageID
	}
	return 0
}

func (x *GroupInvitation) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

type GroupAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID       string          `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	GroupID        string          `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	AddedID        string          `protobuf:"bytes,3,opt,name=addedID,proto3" json:"addedID,omitempty"`
	ParticipantIDs []string        `protobuf:"bytes,4,rep,name=participantIDs,proto3" json:"participantIDs,omitempty"`
	TreeKEMUserAdd *TreeKEMUserAdd `protobuf:"bytes,5,opt,name=treeKEMUserAdd,proto3" json:"treeKEMUserAdd,omitempty"`
	MlsUserAdd     []byte          `protobuf:"bytes,6,opt,name=mlsUserAdd,proto3" json:"mlsUserAdd,omitempty"`
	MlsAddCommit   []byte          `protobuf:"bytes,7,opt,name=mlsAddCommit,proto3" json:"mlsAddCommit,omitempty"`
	GroupType      GroupType       `protobuf:"varint,8,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
}

func (x *GroupAddition) Reset() {
	*x = GroupAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupAddition) ProtoMessage() {}

func (x *GroupAddition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupAddition.ProtoReflect.Descriptor instead.
func (*GroupAddition) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{45}
}

func (x *GroupAddition) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *GroupAddition) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupAddition) GetAddedID() string {
	if x != nil {
		return x.AddedID
	}
	return ""
}

func (x *GroupAddition) GetParticipantIDs() []string {
	if x != nil {
		return x.ParticipantIDs
	}
	return nil
}

func (x *GroupAddition) GetTreeKEMUserAdd() *TreeKEMUserAdd {
	if x != nil {
		return x.TreeKEMUserAdd
	}
	return nil
}

func (x *GroupAddition) GetMlsUserAdd() []byte {
	if x != nil {
		return x.MlsUserAdd
	}
	return nil
}

func (x *GroupAddition) GetMlsAddCommit() []byte {
	if x != nil {
		return x.MlsAddCommit
	}
	return nil
}

func (x *GroupAddition) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

type GroupRemoval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID        string    `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	GroupID         string    `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	RemovedID       string    `protobuf:"bytes,3,opt,name=removedID,proto3" json:"removedID,omitempty"`
	ParticipantIDs  []string  `protobuf:"bytes,4,rep,name=participantIDs,proto3" json:"participantIDs,omitempty"`
	MlsRemove       []byte    `protobuf:"bytes,5,opt,name=mlsRemove,proto3" json:"mlsRemove,omitempty"`
	MlsRemoveCommit []byte    `protobuf:"bytes,6,opt,name=mlsRemoveCommit,proto3" json:"mlsRemoveCommit,omitempty"`
	GroupType       GroupType `protobuf:"varint,7,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
}

func (x *GroupRemoval) Reset() {
	*x = GroupRemoval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRemoval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRemoval) ProtoMessage() {}

func (x *GroupRemoval) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRemoval.ProtoReflect.Descriptor instead.
func (*GroupRemoval) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{46}
}

func (x *GroupRemoval) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *GroupRemoval) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupRemoval) GetRemovedID() string {
	if x != nil {
		return x.RemovedID
	}
	return ""
}

func (x *GroupRemoval) GetParticipantIDs() []string {
	if x != nil {
		return x.ParticipantIDs
	}
	return nil
}

func (x *GroupRemoval) GetMlsRemove() []byte {
	if x != nil {
		return x.MlsRemove
	}
	return nil
}

func (x *GroupRemoval) GetMlsRemoveCommit() []byte {
	if x != nil {
		return x.MlsRemoveCommit
	}
	return nil
}

func (x *GroupRemoval) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

type GroupChatbotInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID           string    `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	GroupID            string    `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ParticipantIDs     []string  `protobuf:"bytes,3,rep,name=participantIDs,proto3" json:"participantIDs,omitempty"`
	GroupType          GroupType `protobuf:"varint,4,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
	IsIGA              bool      `protobuf:"varint,5,opt,name=isIGA,proto3" json:"isIGA,omitempty"`
	IsPseudo           bool      `protobuf:"varint,6,opt,name=isPseudo,proto3" json:"isPseudo,omitempty"`
	TreekemRootPub     []byte    `protobuf:"bytes,7,opt,name=treekemRootPub,proto3" json:"treekemRootPub,omitempty"`
	TreekemRootSignPub []byte    `protobuf:"bytes,8,opt,name=treekemRootSignPub,proto3" json:"treekemRootSignPub,omitempty"`
	ChatbotInitLeaf    []byte    `protobuf:"bytes,9,opt,name=chatbotInitLeaf,proto3" json:"chatbotInitLeaf,omitempty"`
	MlsWelcomeMessage  []byte    `protobuf:"bytes,10,opt,name=MlsWelcomeMessage,proto3" json:"MlsWelcomeMessage,omitempty"`
	MlsKeyPackageID    uint32    `protobuf:"varint,11,opt,name=MlsKeyPackageID,proto3" json:"MlsKeyPackageID,omitempty"`
}

func (x *GroupChatbotInvitation) Reset() {
	*x = GroupChatbotInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatbotInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatbotInvitation) ProtoMessage() {}

func (x *GroupChatbotInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatbotInvitation.ProtoReflect.Descriptor instead.
func (*GroupChatbotInvitation) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{47}
}

func (x *GroupChatbotInvitation) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *GroupChatbotInvitation) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupChatbotInvitation) GetParticipantIDs() []string {
	if x != nil {
		return x.ParticipantIDs
	}
	return nil
}

func (x *GroupChatbotInvitation) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

func (x *GroupChatbotInvitation) GetIsIGA() bool {
	if x != nil {
		return x.IsIGA
	}
	return false
}

func (x *GroupChatbotInvitation) GetIsPseudo() bool {
	if x != nil {
		return x.IsPseudo
	}
	return false
}

func (x *GroupChatbotInvitation) GetTreekemRootPub() []byte {
	if x != nil {
		return x.TreekemRootPub
	}
	return nil
}

func (x *GroupChatbotInvitation) GetTreekemRootSignPub() []byte {
	if x != nil {
		return x.TreekemRootSignPub
	}
	return nil
}

func (x *GroupChatbotInvitation) GetChatbotInitLeaf() []byte {
	if x != nil {
		return x.ChatbotInitLeaf
	}
	return nil
}

func (x *GroupChatbotInvitation) GetMlsWelcomeMessage() []byte {
	if x != nil {
		return x.MlsWelcomeMessage
	}
	return nil
}

func (x *GroupChatbotInvitation) GetMlsKeyPackageID() uint32 {
	if x != nil {
		return x.MlsKeyPackageID
	}
	return 0
}

type GroupChatbotAddition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID          string           `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	GroupID           string           `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	AddedChatbotID    string           `protobuf:"bytes,3,opt,name=addedChatbotID,proto3" json:"addedChatbotID,omitempty"`
	ChatbotIDs        []string         `protobuf:"bytes,4,rep,name=chatbotIDs,proto3" json:"chatbotIDs,omitempty"`
	GroupType         GroupType        `protobuf:"varint,5,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
	IsIGA             bool             `protobuf:"varint,6,opt,name=isIGA,proto3" json:"isIGA,omitempty"`
	IsPseudo          bool             `protobuf:"varint,7,opt,name=isPseudo,proto3" json:"isPseudo,omitempty"`
	ChatbotCipherText *ECKEMCipherText `protobuf:"bytes,8,opt,name=chatbotCipherText,proto3" json:"chatbotCipherText,omitempty"`
	MlsUserAdd        []byte           `protobuf:"bytes,9,opt,name=mlsUserAdd,proto3" json:"mlsUserAdd,omitempty"`
	MlsAddCommit      []byte           `protobuf:"bytes,10,opt,name=mlsAddCommit,proto3" json:"mlsAddCommit,omitempty"`
}

func (x *GroupChatbotAddition) Reset() {
	*x = GroupChatbotAddition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatbotAddition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatbotAddition) ProtoMessage() {}

func (x *GroupChatbotAddition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatbotAddition.ProtoReflect.Descriptor instead.
func (*GroupChatbotAddition) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{48}
}

func (x *GroupChatbotAddition) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *GroupChatbotAddition) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupChatbotAddition) GetAddedChatbotID() string {
	if x != nil {
		return x.AddedChatbotID
	}
	return ""
}

func (x *GroupChatbotAddition) GetChatbotIDs() []string {
	if x != nil {
		return x.ChatbotIDs
	}
	return nil
}

func (x *GroupChatbotAddition) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

func (x *GroupChatbotAddition) GetIsIGA() bool {
	if x != nil {
		return x.IsIGA
	}
	return false
}

func (x *GroupChatbotAddition) GetIsPseudo() bool {
	if x != nil {
		return x.IsPseudo
	}
	return false
}

func (x *GroupChatbotAddition) GetChatbotCipherText() *ECKEMCipherText {
	if x != nil {
		return x.ChatbotCipherText
	}
	return nil
}

func (x *GroupChatbotAddition) GetMlsUserAdd() []byte {
	if x != nil {
		return x.MlsUserAdd
	}
	return nil
}

func (x *GroupChatbotAddition) GetMlsAddCommit() []byte {
	if x != nil {
		return x.MlsAddCommit
	}
	return nil
}

type GroupChatbotRemoval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID         string    `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	GroupID          string    `protobuf:"bytes,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	RemovedChatbotID string    `protobuf:"bytes,3,opt,name=removedChatbotID,proto3" json:"removedChatbotID,omitempty"`
	ChatbotIDs       []string  `protobuf:"bytes,4,rep,name=chatbotIDs,proto3" json:"chatbotIDs,omitempty"`
	MlsRemove        []byte    `protobuf:"bytes,5,opt,name=mlsRemove,proto3" json:"mlsRemove,omitempty"`
	MlsRemoveCommit  []byte    `protobuf:"bytes,6,opt,name=mlsRemoveCommit,proto3" json:"mlsRemoveCommit,omitempty"`
	GroupType        GroupType `protobuf:"varint,7,opt,name=groupType,proto3,enum=Services.GroupType" json:"groupType,omitempty"`
}

func (x *GroupChatbotRemoval) Reset() {
	*x = GroupChatbotRemoval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatbotRemoval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatbotRemoval) ProtoMessage() {}

func (x *GroupChatbotRemoval) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatbotRemoval.ProtoReflect.Descriptor instead.
func (*GroupChatbotRemoval) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{49}
}

func (x *GroupChatbotRemoval) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *GroupChatbotRemoval) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GroupChatbotRemoval) GetRemovedChatbotID() string {
	if x != nil {
		return x.RemovedChatbotID
	}
	return ""
}

func (x *GroupChatbotRemoval) GetChatbotIDs() []string {
	if x != nil {
		return x.ChatbotIDs
	}
	return nil
}

func (x *GroupChatbotRemoval) GetMlsRemove() []byte {
	if x != nil {
		return x.MlsRemove
	}
	return nil
}

func (x *GroupChatbotRemoval) GetMlsRemoveCommit() []byte {
	if x != nil {
		return x.MlsRemoveCommit
	}
	return nil
}

func (x *GroupChatbotRemoval) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_CLIENT_SIDE
}

type ServerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType ServerEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=Services.ServerEventType" json:"eventType,omitempty"`
	// Types that are assignable to EventData:
	//
	//	*ServerEvent_GroupInvitation
	//	*ServerEvent_GroupAddition
	//	*ServerEvent_GroupRemoval
	//	*ServerEvent_GroupChatbotInvitation
	//	*ServerEvent_GroupChatbotAddition
	//	*ServerEvent_GroupChatbotRemoval
	EventData isServerEvent_EventData `protobuf_oneof:"eventData"`
}

func (x *ServerEvent) Reset() {
	*x = ServerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEvent) ProtoMessage() {}

func (x *ServerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEvent.ProtoReflect.Descriptor instead.
func (*ServerEvent) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{50}
}

func (x *ServerEvent) GetEventType() ServerEventType {
	if x != nil {
		return x.EventType
	}
	return ServerEventType_GROUP_INVITATION
}

func (m *ServerEvent) GetEventData() isServerEvent_EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (x *ServerEvent) GetGroupInvitation() *GroupInvitation {
	if x, ok := x.GetEventData().(*ServerEvent_GroupInvitation); ok {
		return x.GroupInvitation
	}
	return nil
}

func (x *ServerEvent) GetGroupAddition() *GroupAddition {
	if x, ok := x.GetEventData().(*ServerEvent_GroupAddition); ok {
		return x.GroupAddition
	}
	return nil
}

func (x *ServerEvent) GetGroupRemoval() *GroupRemoval {
	if x, ok := x.GetEventData().(*ServerEvent_GroupRemoval); ok {
		return x.GroupRemoval
	}
	return nil
}

func (x *ServerEvent) GetGroupChatbotInvitation() *GroupChatbotInvitation {
	if x, ok := x.GetEventData().(*ServerEvent_GroupChatbotInvitation); ok {
		return x.GroupChatbotInvitation
	}
	return nil
}

func (x *ServerEvent) GetGroupChatbotAddition() *GroupChatbotAddition {
	if x, ok := x.GetEventData().(*ServerEvent_GroupChatbotAddition); ok {
		return x.GroupChatbotAddition
	}
	return nil
}

func (x *ServerEvent) GetGroupChatbotRemoval() *GroupChatbotRemoval {
	if x, ok := x.GetEventData().(*ServerEvent_GroupChatbotRemoval); ok {
		return x.GroupChatbotRemoval
	}
	return nil
}

type isServerEvent_EventData interface {
	isServerEvent_EventData()
}

type ServerEvent_GroupInvitation struct {
	GroupInvitation *GroupInvitation `protobuf:"bytes,2,opt,name=groupInvitation,proto3,oneof"`
}

type ServerEvent_GroupAddition struct {
	GroupAddition *GroupAddition `protobuf:"bytes,3,opt,name=groupAddition,proto3,oneof"`
}

type ServerEvent_GroupRemoval struct {
	GroupRemoval *GroupRemoval `protobuf:"bytes,4,opt,name=groupRemoval,proto3,oneof"`
}

type ServerEvent_GroupChatbotInvitation struct {
	GroupChatbotInvitation *GroupChatbotInvitation `protobuf:"bytes,5,opt,name=groupChatbotInvitation,proto3,oneof"`
}

type ServerEvent_GroupChatbotAddition struct {
	GroupChatbotAddition *GroupChatbotAddition `protobuf:"bytes,6,opt,name=groupChatbotAddition,proto3,oneof"`
}

type ServerEvent_GroupChatbotRemoval struct {
	GroupChatbotRemoval *GroupChatbotRemoval `protobuf:"bytes,7,opt,name=groupChatbotRemoval,proto3,oneof"`
}

func (*ServerEvent_GroupInvitation) isServerEvent_EventData() {}

func (*ServerEvent_GroupAddition) isServerEvent_EventData() {}

func (*ServerEvent_GroupRemoval) isServerEvent_EventData() {}

func (*ServerEvent_GroupChatbotInvitation) isServerEvent_EventData() {}

func (*ServerEvent_GroupChatbotAddition) isServerEvent_EventData() {}

func (*ServerEvent_GroupChatbotRemoval) isServerEvent_EventData() {}

// TreeKEM
type TreeKEMUserAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size        uint32                  `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	Ciphertexts []*ECKEMCipherTextMap   `protobuf:"bytes,2,rep,name=Ciphertexts,proto3" json:"Ciphertexts,omitempty"`
	Nodes       map[uint32]*TreeKEMNode `protobuf:"bytes,3,rep,name=Nodes,proto3" json:"Nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TreeKEMUserAdd) Reset() {
	*x = TreeKEMUserAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeKEMUserAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeKEMUserAdd) ProtoMessage() {}

func (x *TreeKEMUserAdd) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeKEMUserAdd.ProtoReflect.Descriptor instead.
func (*TreeKEMUserAdd) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{51}
}

func (x *TreeKEMUserAdd) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TreeKEMUserAdd) GetCiphertexts() []*ECKEMCipherTextMap {
	if x != nil {
		return x.Ciphertexts
	}
	return nil
}

func (x *TreeKEMUserAdd) GetNodes() map[uint32]*TreeKEMNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type TreeKEMUserUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        uint32                  `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	Ciphertexts []*ECKEMCipherTextMap   `protobuf:"bytes,2,rep,name=Ciphertexts,proto3" json:"Ciphertexts,omitempty"`
	Nodes       map[uint32]*TreeKEMNode `protobuf:"bytes,3,rep,name=Nodes,proto3" json:"Nodes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TreeKEMUserUpdate) Reset() {
	*x = TreeKEMUserUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeKEMUserUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeKEMUserUpdate) ProtoMessage() {}

func (x *TreeKEMUserUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeKEMUserUpdate.ProtoReflect.Descriptor instead.
func (*TreeKEMUserUpdate) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{52}
}

func (x *TreeKEMUserUpdate) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *TreeKEMUserUpdate) GetCiphertexts() []*ECKEMCipherTextMap {
	if x != nil {
		return x.Ciphertexts
	}
	return nil
}

func (x *TreeKEMUserUpdate) GetNodes() map[uint32]*TreeKEMNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type TreeKEMKeyUpdatePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUpdate               *TreeKEMUserUpdate        `protobuf:"bytes,1,opt,name=UserUpdate,proto3" json:"UserUpdate,omitempty"`
	ChatbotUpdateCiphertexts *ECKEMCipherTextStringMap `protobuf:"bytes,2,opt,name=ChatbotUpdateCiphertexts,proto3" json:"ChatbotUpdateCiphertexts,omitempty"`
	NewRootPubKey            []byte                    `protobuf:"bytes,3,opt,name=NewRootPubKey,proto3" json:"NewRootPubKey,omitempty"`
	NewRootSignPubKey        []byte                    `protobuf:"bytes,4,opt,name=NewRootSignPubKey,proto3" json:"NewRootSignPubKey,omitempty"`
}

func (x *TreeKEMKeyUpdatePack) Reset() {
	*x = TreeKEMKeyUpdatePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeKEMKeyUpdatePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeKEMKeyUpdatePack) ProtoMessage() {}

func (x *TreeKEMKeyUpdatePack) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeKEMKeyUpdatePack.ProtoReflect.Descriptor instead.
func (*TreeKEMKeyUpdatePack) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{53}
}

func (x *TreeKEMKeyUpdatePack) GetUserUpdate() *TreeKEMUserUpdate {
	if x != nil {
		return x.UserUpdate
	}
	return nil
}

func (x *TreeKEMKeyUpdatePack) GetChatbotUpdateCiphertexts() *ECKEMCipherTextStringMap {
	if x != nil {
		return x.ChatbotUpdateCiphertexts
	}
	return nil
}

func (x *TreeKEMKeyUpdatePack) GetNewRootPubKey() []byte {
	if x != nil {
		return x.NewRootPubKey
	}
	return nil
}

func (x *TreeKEMKeyUpdatePack) GetNewRootSignPubKey() []byte {
	if x != nil {
		return x.NewRootSignPubKey
	}
	return nil
}

type MultiTreeKEMExternalKeyUpdatePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatbotUpdate   *ECKEMCipherText `protobuf:"bytes,1,opt,name=ChatbotUpdate,proto3" json:"ChatbotUpdate,omitempty"`
	NewCbPubKey     []byte           `protobuf:"bytes,2,opt,name=NewCbPubKey,proto3" json:"NewCbPubKey,omitempty"`
	NewCbSignPubKey []byte           `protobuf:"bytes,3,opt,name=NewCbSignPubKey,proto3" json:"NewCbSignPubKey,omitempty"`
}

func (x *MultiTreeKEMExternalKeyUpdatePack) Reset() {
	*x = MultiTreeKEMExternalKeyUpdatePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTreeKEMExternalKeyUpdatePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTreeKEMExternalKeyUpdatePack) ProtoMessage() {}

func (x *MultiTreeKEMExternalKeyUpdatePack) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTreeKEMExternalKeyUpdatePack.ProtoReflect.Descriptor instead.
func (*MultiTreeKEMExternalKeyUpdatePack) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{54}
}

func (x *MultiTreeKEMExternalKeyUpdatePack) GetChatbotUpdate() *ECKEMCipherText {
	if x != nil {
		return x.ChatbotUpdate
	}
	return nil
}

func (x *MultiTreeKEMExternalKeyUpdatePack) GetNewCbPubKey() []byte {
	if x != nil {
		return x.NewCbPubKey
	}
	return nil
}

func (x *MultiTreeKEMExternalKeyUpdatePack) GetNewCbSignPubKey() []byte {
	if x != nil {
		return x.NewCbSignPubKey
	}
	return nil
}

type TreeKEMGroupInitKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     uint32                  `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	Frontier map[uint32]*TreeKEMNode `protobuf:"bytes,2,rep,name=Frontier,proto3" json:"Frontier,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TreeKEMGroupInitKey) Reset() {
	*x = TreeKEMGroupInitKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeKEMGroupInitKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeKEMGroupInitKey) ProtoMessage() {}

func (x *TreeKEMGroupInitKey) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeKEMGroupInitKey.ProtoReflect.Descriptor instead.
func (*TreeKEMGroupInitKey) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{55}
}

func (x *TreeKEMGroupInitKey) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TreeKEMGroupInitKey) GetFrontier() map[uint32]*TreeKEMNode {
	if x != nil {
		return x.Frontier
	}
	return nil
}

type ECKEMCipherText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     []byte `protobuf:"bytes,1,opt,name=Public,proto3" json:"Public,omitempty"`
	IV         []byte `protobuf:"bytes,2,opt,name=IV,proto3" json:"IV,omitempty"`
	CipherText []byte `protobuf:"bytes,3,opt,name=CipherText,proto3" json:"CipherText,omitempty"`
}

func (x *ECKEMCipherText) Reset() {
	*x = ECKEMCipherText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECKEMCipherText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECKEMCipherText) ProtoMessage() {}

func (x *ECKEMCipherText) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECKEMCipherText.ProtoReflect.Descriptor instead.
func (*ECKEMCipherText) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{56}
}

func (x *ECKEMCipherText) GetPublic() []byte {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *ECKEMCipherText) GetIV() []byte {
	if x != nil {
		return x.IV
	}
	return nil
}

func (x *ECKEMCipherText) GetCipherText() []byte {
	if x != nil {
		return x.CipherText
	}
	return nil
}

type ECKEMCipherTextMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertexts map[uint32]*ECKEMCipherText `protobuf:"bytes,1,rep,name=Ciphertexts,proto3" json:"Ciphertexts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ECKEMCipherTextMap) Reset() {
	*x = ECKEMCipherTextMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECKEMCipherTextMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECKEMCipherTextMap) ProtoMessage() {}

func (x *ECKEMCipherTextMap) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECKEMCipherTextMap.ProtoReflect.Descriptor instead.
func (*ECKEMCipherTextMap) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{57}
}

func (x *ECKEMCipherTextMap) GetCiphertexts() map[uint32]*ECKEMCipherText {
	if x != nil {
		return x.Ciphertexts
	}
	return nil
}

type ECKEMCipherTextStringMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertexts map[string]*ECKEMCipherText `protobuf:"bytes,1,rep,name=Ciphertexts,proto3" json:"Ciphertexts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ECKEMCipherTextStringMap) Reset() {
	*x = ECKEMCipherTextStringMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECKEMCipherTextStringMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECKEMCipherTextStringMap) ProtoMessage() {}

func (x *ECKEMCipherTextStringMap) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECKEMCipherTextStringMap.ProtoReflect.Descriptor instead.
func (*ECKEMCipherTextStringMap) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{58}
}

func (x *ECKEMCipherTextStringMap) GetCiphertexts() map[string]*ECKEMCipherText {
	if x != nil {
		return x.Ciphertexts
	}
	return nil
}

type TreeKEMNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret      []byte `protobuf:"bytes,1,opt,name=Secret,proto3" json:"Secret,omitempty"`
	Public      []byte `protobuf:"bytes,2,opt,name=Public,proto3" json:"Public,omitempty"`
	Private     []byte `protobuf:"bytes,3,opt,name=Private,proto3" json:"Private,omitempty"`
	SignPublic  []byte `protobuf:"bytes,4,opt,name=SignPublic,proto3" json:"SignPublic,omitempty"`
	SignPrivate []byte `protobuf:"bytes,5,opt,name=SignPrivate,proto3" json:"SignPrivate,omitempty"`
}

func (x *TreeKEMNode) Reset() {
	*x = TreeKEMNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_services_services_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeKEMNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeKEMNode) ProtoMessage() {}

func (x *TreeKEMNode) ProtoReflect() protoreflect.Message {
	mi := &file_protos_services_services_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeKEMNode.ProtoReflect.Descriptor instead.
func (*TreeKEMNode) Descriptor() ([]byte, []int) {
	return file_protos_services_services_proto_rawDescGZIP(), []int{59}
}

func (x *TreeKEMNode) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *TreeKEMNode) GetPublic() []byte {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *TreeKEMNode) GetPrivate() []byte {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *TreeKEMNode) GetSignPublic() []byte {
	if x != nil {
		return x.SignPublic
	}
	return nil
}

func (x *TreeKEMNode) GetSignPrivate() []byte {
	if x != nil {
		return x.SignPrivate
	}
	return nil
}

var File_protos_services_services_proto protoreflect.FileDescriptor

var file_protos_services_services_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x22, 0x54, 0x0a,
	0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x53, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x18,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x5b, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x19,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x4c, 0x53, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7e,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4f,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6d,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xf8, 0x06, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x13, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x4b, 0x45, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x13, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x4b,
	0x45, 0x4d, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x61,
	0x66, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x65, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x62, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4b,
	0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x1a, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6c, 0x73, 0x57, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x6d, 0x6c, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a,
	0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x6c,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x54, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65,
	0x6b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x6b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x75, 0x62,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x65, 0x65, 0x6b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x72,
	0x65, 0x65, 0x6b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4c,
	0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6c, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x6d, 0x6c, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6d, 0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x6c, 0x73, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x6d, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22,
	0x55, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6c, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6c,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x22, 0x55, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9c,
	0x01, 0x0a, 0x1c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x1c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x22, 0x82, 0x01,
	0x0a, 0x1c, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x50,
	0x75, 0x62, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x50, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x12, 0x52, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45,
	0x4d, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x14, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x4b, 0x65, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x5f, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x14, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x4b, 0x65,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6d, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xed, 0x08, 0x0a, 0x0f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x12, 0x4f, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x49, 0x47, 0x41, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x49, 0x47, 0x41, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x49, 0x47, 0x41, 0x12, 0x58, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49,
	0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x12, 0x4f, 0x0a, 0x13, 0x74, 0x72, 0x65, 0x65, 0x4b,
	0x45, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x13, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x65, 0x65,
	0x4b, 0x45, 0x4d, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65,
	0x61, 0x66, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x62, 0x0a, 0x1a,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45,
	0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x65,
	0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x6c, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x4d, 0x6c, 0x73,
	0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x4d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x49, 0x47, 0x41, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02, 0x0a, 0x0d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6c, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6c, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6c, 0x73, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x6c,
	0x73, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x02,
	0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6c,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d,
	0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x03, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x6b, 0x65, 0x6d, 0x52, 0x6f,
	0x6f, 0x74, 0x50, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x74, 0x72, 0x65,
	0x65, 0x6b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x72, 0x65, 0x65, 0x6b, 0x65, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75,
	0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x72, 0x65, 0x65, 0x6b, 0x65, 0x6d,
	0x52, 0x6f, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x6c, 0x73, 0x57, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x4d, 0x6c, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4d, 0x6c,
	0x73, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x86, 0x03,
	0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x49, 0x44, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x49, 0x47, 0x41, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x11, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6c, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x6c, 0x73, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x04, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x16, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x74, 0x62, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x13,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a,
	0x0e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4f,
	0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf6, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x65,
	0x65, 0x4b, 0x45, 0x4d, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x12, 0x3b, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5e,
	0x0a, 0x18, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45,
	0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x52, 0x18, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x65, 0x65,
	0x4b, 0x45, 0x4d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x74,
	0x62, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77,
	0x43, 0x62, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x4e, 0x65, 0x77, 0x43, 0x62, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4e,
	0x65, 0x77, 0x43, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x47, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x4b,
	0x65, 0x79, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x1a, 0x52, 0x0a, 0x0d, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59,
	0x0a, 0x0f, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x56, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x56, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x45, 0x43,
	0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x4f, 0x0a, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a,
	0x18, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0b, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x1a, 0x59, 0x0a, 0x10, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x45, 0x43, 0x4b, 0x45, 0x4d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0b,
	0x54, 0x72, 0x65, 0x65, 0x4b, 0x45, 0x4d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x53, 0x69, 0x67, 0x6e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2a, 0x36, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4c, 0x53, 0x10, 0x02, 0x2a,
	0xa9, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x4e,
	0x59, 0x4d, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x05, 0x2a, 0xa3, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x42, 0x4f, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x42, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10,
	0x05, 0x32, 0xf3, 0x0c, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x4c, 0x53, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x4c, 0x53,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x12, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x62,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x12, 0x1e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x1a, 0x18,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x1a, 0x15, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_protos_services_services_proto_rawDescOnce sync.Once
	file_protos_services_services_proto_rawDescData = file_protos_services_services_proto_rawDesc
)

func file_protos_services_services_proto_rawDescGZIP() []byte {
	file_protos_services_services_proto_rawDescOnce.Do(func() {
		file_protos_services_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_services_services_proto_rawDescData)
	})
	return file_protos_services_services_proto_rawDescData
}

var file_protos_services_services_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_services_services_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_protos_services_services_proto_goTypes = []interface{}{
	(GroupType)(0),                            // 0: Services.GroupType
	(MessageType)(0),                          // 1: Services.MessageType
	(ServerEventType)(0),                      // 2: Services.ServerEventType
	(*UploadPreKeyRequest)(nil),               // 3: Services.UploadPreKeyRequest
	(*UploadPreKeyResponse)(nil),              // 4: Services.UploadPreKeyResponse
	(*FetchPreKeyRequest)(nil),                // 5: Services.FetchPreKeyRequest
	(*FetchPreKeyResponse)(nil),               // 6: Services.FetchPreKeyResponse
	(*UploadSignedPreKeyRequest)(nil),         // 7: Services.UploadSignedPreKeyRequest
	(*UploadSignedPreKeyResponse)(nil),        // 8: Services.UploadSignedPreKeyResponse
	(*FetchSignedPreKeyRequest)(nil),          // 9: Services.FetchSignedPreKeyRequest
	(*FetchSignedPreKeyResponse)(nil),         // 10: Services.FetchSignedPreKeyResponse
	(*FetchIdentityKeyRequest)(nil),           // 11: Services.FetchIdentityKeyRequest
	(*FetchIdentityKeyResponse)(nil),          // 12: Services.FetchIdentityKeyResponse
	(*UploadMLSKeyPackageRequest)(nil),        // 13: Services.UploadMLSKeyPackageRequest
	(*UploadMLSKeyPackageResponse)(nil),       // 14: Services.UploadMLSKeyPackageResponse
	(*FetchMLSKeyPackageRequest)(nil),         // 15: Services.FetchMLSKeyPackageRequest
	(*FetchMLSKeyPackageResponse)(nil),        // 16: Services.FetchMLSKeyPackageResponse
	(*SetUserRequest)(nil),                    // 17: Services.SetUserRequest
	(*SetUserResponse)(nil),                   // 18: Services.SetUserResponse
	(*GetUserRequest)(nil),                    // 19: Services.GetUserRequest
	(*GetUserResponse)(nil),                   // 20: Services.GetUserResponse
	(*SetChatbotRequest)(nil),                 // 21: Services.SetChatbotRequest
	(*SetChatbotResponse)(nil),                // 22: Services.SetChatbotResponse
	(*GetChatbotRequest)(nil),                 // 23: Services.GetChatbotRequest
	(*GetChatbotResponse)(nil),                // 24: Services.GetChatbotResponse
	(*CreateGroupRequest)(nil),                // 25: Services.CreateGroupRequest
	(*CreateGroupResponse)(nil),               // 26: Services.CreateGroupResponse
	(*GetGroupRequest)(nil),                   // 27: Services.GetGroupRequest
	(*GetGroupResponse)(nil),                  // 28: Services.GetGroupResponse
	(*InviteMemberRequest)(nil),               // 29: Services.InviteMemberRequest
	(*InviteMemberResponse)(nil),              // 30: Services.InviteMemberResponse
	(*RemoveMemberRequest)(nil),               // 31: Services.RemoveMemberRequest
	(*RemoveMemberResponse)(nil),              // 32: Services.RemoveMemberResponse
	(*InviteChatbotRequest)(nil),              // 33: Services.InviteChatbotRequest
	(*InviteChatbotResponse)(nil),             // 34: Services.InviteChatbotResponse
	(*RemoveChatbotRequest)(nil),              // 35: Services.RemoveChatbotRequest
	(*RemoveChatbotResponse)(nil),             // 36: Services.RemoveChatbotResponse
	(*MessageStreamInit)(nil),                 // 37: Services.MessageStreamInit
	(*SendMessageResponse)(nil),               // 38: Services.SendMessageResponse
	(*Message)(nil),                           // 39: Services.Message
	(*ChatbotMessage)(nil),                    // 40: Services.ChatbotMessage
	(*ClientSideGroupMessage)(nil),            // 41: Services.ClientSideGroupMessage
	(*SenderKeyDistributionMessage)(nil),      // 42: Services.SenderKeyDistributionMessage
	(*PseudonymRegistrationMessage)(nil),      // 43: Services.PseudonymRegistrationMessage
	(*ValidationMessage)(nil),                 // 44: Services.ValidationMessage
	(*MessageWrapper)(nil),                    // 45: Services.MessageWrapper
	(*ServerEventStreamInit)(nil),             // 46: Services.ServerEventStreamInit
	(*GroupInvitation)(nil),                   // 47: Services.GroupInvitation
	(*GroupAddition)(nil),                     // 48: Services.GroupAddition
	(*GroupRemoval)(nil),                      // 49: Services.GroupRemoval
	(*GroupChatbotInvitation)(nil),            // 50: Services.GroupChatbotInvitation
	(*GroupChatbotAddition)(nil),              // 51: Services.GroupChatbotAddition
	(*GroupChatbotRemoval)(nil),               // 52: Services.GroupChatbotRemoval
	(*ServerEvent)(nil),                       // 53: Services.ServerEvent
	(*TreeKEMUserAdd)(nil),                    // 54: Services.TreeKEMUserAdd
	(*TreeKEMUserUpdate)(nil),                 // 55: Services.TreeKEMUserUpdate
	(*TreeKEMKeyUpdatePack)(nil),              // 56: Services.TreeKEMKeyUpdatePack
	(*MultiTreeKEMExternalKeyUpdatePack)(nil), // 57: Services.MultiTreeKEMExternalKeyUpdatePack
	(*TreeKEMGroupInitKey)(nil),               // 58: Services.TreeKEMGroupInitKey
	(*ECKEMCipherText)(nil),                   // 59: Services.ECKEMCipherText
	(*ECKEMCipherTextMap)(nil),                // 60: Services.ECKEMCipherTextMap
	(*ECKEMCipherTextStringMap)(nil),          // 61: Services.ECKEMCipherTextStringMap
	(*TreeKEMNode)(nil),                       // 62: Services.TreeKEMNode
	nil,                                       // 63: Services.InviteMemberRequest.ChatbotPubKeysEntry
	nil,                                       // 64: Services.InviteMemberRequest.ChatbotSignPubKeysEntry
	nil,                                       // 65: Services.GroupInvitation.ChatbotIsIGAEntry
	nil,                                       // 66: Services.GroupInvitation.ChatbotIsPseudoEntry
	nil,                                       // 67: Services.GroupInvitation.ChatbotPubKeysEntry
	nil,                                       // 68: Services.GroupInvitation.ChatbotSignPubKeysEntry
	nil,                                       // 69: Services.TreeKEMUserAdd.NodesEntry
	nil,                                       // 70: Services.TreeKEMUserUpdate.NodesEntry
	nil,                                       // 71: Services.TreeKEMGroupInitKey.FrontierEntry
	nil,                                       // 72: Services.ECKEMCipherTextMap.CiphertextsEntry
	nil,                                       // 73: Services.ECKEMCipherTextStringMap.CiphertextsEntry
}
var file_protos_services_services_proto_depIdxs = []int32{
	0,  // 0: Services.CreateGroupRequest.groupType:type_name -> Services.GroupType
	0,  // 1: Services.GetGroupResponse.groupType:type_name -> Services.GroupType
	58, // 2: Services.InviteMemberRequest.treeKEMGroupInitKey:type_name -> Services.TreeKEMGroupInitKey
	54, // 3: Services.InviteMemberRequest.treeKEMUserAdd:type_name -> Services.TreeKEMUserAdd
	63, // 4: Services.InviteMemberRequest.chatbotPubKeys:type_name -> Services.InviteMemberRequest.ChatbotPubKeysEntry
	64, // 5: Services.InviteMemberRequest.chatbotSignPubKeys:type_name -> Services.InviteMemberRequest.ChatbotSignPubKeysEntry
	61, // 6: Services.InviteMemberRequest.lastTreeKemRootCiphertexts:type_name -> Services.ECKEMCipherTextStringMap
	59, // 7: Services.InviteChatbotRequest.chatbotCipherText:type_name -> Services.ECKEMCipherText
	1,  // 8: Services.Message.messageType:type_name -> Services.MessageType
	45, // 9: Services.ChatbotMessage.messageWrapper:type_name -> Services.MessageWrapper
	1,  // 10: Services.ClientSideGroupMessage.messageType:type_name -> Services.MessageType
	1,  // 11: Services.ValidationMessage.previousMessageType:type_name -> Services.MessageType
	40, // 12: Services.MessageWrapper.chatbotMessages:type_name -> Services.ChatbotMessage
	56, // 13: Services.MessageWrapper.treeKEMKeyUpdatePack:type_name -> Services.TreeKEMKeyUpdatePack
	57, // 14: Services.MessageWrapper.chatbotKeyUpdatePack:type_name -> Services.MultiTreeKEMExternalKeyUpdatePack
	65, // 15: Services.GroupInvitation.chatbotIsIGA:type_name -> Services.GroupInvitation.ChatbotIsIGAEntry
	66, // 16: Services.GroupInvitation.chatbotIsPseudo:type_name -> Services.GroupInvitation.ChatbotIsPseudoEntry
	58, // 17: Services.GroupInvitation.treeKEMGroupInitKey:type_name -> Services.TreeKEMGroupInitKey
	67, // 18: Services.GroupInvitation.chatbotPubKeys:type_name -> Services.GroupInvitation.ChatbotPubKeysEntry
	68, // 19: Services.GroupInvitation.chatbotSignPubKeys:type_name -> Services.GroupInvitation.ChatbotSignPubKeysEntry
	61, // 20: Services.GroupInvitation.lastTreeKemRootCiphertexts:type_name -> Services.ECKEMCipherTextStringMap
	0,  // 21: Services.GroupInvitation.groupType:type_name -> Services.GroupType
	54, // 22: Services.GroupAddition.treeKEMUserAdd:type_name -> Services.TreeKEMUserAdd
	0,  // 23: Services.GroupAddition.groupType:type_name -> Services.GroupType
	0,  // 24: Services.GroupRemoval.groupType:type_name -> Services.GroupType
	0,  // 25: Services.GroupChatbotInvitation.groupType:type_name -> Services.GroupType
	0,  // 26: Services.GroupChatbotAddition.groupType:type_name -> Services.GroupType
	59, // 27: Services.GroupChatbotAddition.chatbotCipherText:type_name -> Services.ECKEMCipherText
	0,  // 28: Services.GroupChatbotRemoval.groupType:type_name -> Services.GroupType
	2,  // 29: Services.ServerEvent.eventType:type_name -> Services.ServerEventType
	47, // 30: Services.ServerEvent.groupInvitation:type_name -> Services.GroupInvitation
	48, // 31: Services.ServerEvent.groupAddition:type_name -> Services.GroupAddition
	49, // 32: Services.ServerEvent.groupRemoval:type_name -> Services.GroupRemoval
	50, // 33: Services.ServerEvent.groupChatbotInvitation:type_name -> Services.GroupChatbotInvitation
	51, // 34: Services.ServerEvent.groupChatbotAddition:type_name -> Services.GroupChatbotAddition
	52, // 35: Services.ServerEvent.groupChatbotRemoval:type_name -> Services.GroupChatbotRemoval
	60, // 36: Services.TreeKEMUserAdd.Ciphertexts:type_name -> Services.ECKEMCipherTextMap
	69, // 37: Services.TreeKEMUserAdd.Nodes:type_name -> Services.TreeKEMUserAdd.NodesEntry
	60, // 38: Services.TreeKEMUserUpdate.Ciphertexts:type_name -> Services.ECKEMCipherTextMap
	70, // 39: Services.TreeKEMUserUpdate.Nodes:type_name -> Services.TreeKEMUserUpdate.NodesEntry
	55, // 40: Services.TreeKEMKeyUpdatePack.UserUpdate:type_name -> Services.TreeKEMUserUpdate
	61, // 41: Services.TreeKEMKeyUpdatePack.ChatbotUpdateCiphertexts:type_name -> Services.ECKEMCipherTextStringMap
	59, // 42: Services.MultiTreeKEMExternalKeyUpdatePack.ChatbotUpdate:type_name -> Services.ECKEMCipherText
	71, // 43: Services.TreeKEMGroupInitKey.Frontier:type_name -> Services.TreeKEMGroupInitKey.FrontierEntry
	72, // 44: Services.ECKEMCipherTextMap.Ciphertexts:type_name -> Services.ECKEMCipherTextMap.CiphertextsEntry
	73, // 45: Services.ECKEMCipherTextStringMap.Ciphertexts:type_name -> Services.ECKEMCipherTextStringMap.CiphertextsEntry
	62, // 46: Services.TreeKEMUserAdd.NodesEntry.value:type_name -> Services.TreeKEMNode
	62, // 47: Services.TreeKEMUserUpdate.NodesEntry.value:type_name -> Services.TreeKEMNode
	62, // 48: Services.TreeKEMGroupInitKey.FrontierEntry.value:type_name -> Services.TreeKEMNode
	59, // 49: Services.ECKEMCipherTextMap.CiphertextsEntry.value:type_name -> Services.ECKEMCipherText
	59, // 50: Services.ECKEMCipherTextStringMap.CiphertextsEntry.value:type_name -> Services.ECKEMCipherText
	3,  // 51: Services.ChatService.UploadPreKey:input_type -> Services.UploadPreKeyRequest
	5,  // 52: Services.ChatService.FetchPreKey:input_type -> Services.FetchPreKeyRequest
	7,  // 53: Services.ChatService.UploadSignedPreKey:input_type -> Services.UploadSignedPreKeyRequest
	9,  // 54: Services.ChatService.FetchSignedPreKey:input_type -> Services.FetchSignedPreKeyRequest
	11, // 55: Services.ChatService.FetchIdentityKey:input_type -> Services.FetchIdentityKeyRequest
	13, // 56: Services.ChatService.UploadMLSKeyPackage:input_type -> Services.UploadMLSKeyPackageRequest
	15, // 57: Services.ChatService.FetchMLSKeyPackage:input_type -> Services.FetchMLSKeyPackageRequest
	19, // 58: Services.ChatService.GetUser:input_type -> Services.GetUserRequest
	17, // 59: Services.ChatService.SetUser:input_type -> Services.SetUserRequest
	23, // 60: Services.ChatService.GetChatbot:input_type -> Services.GetChatbotRequest
	21, // 61: Services.ChatService.SetChatbot:input_type -> Services.SetChatbotRequest
	25, // 62: Services.ChatService.CreateGroup:input_type -> Services.CreateGroupRequest
	27, // 63: Services.ChatService.GetGroup:input_type -> Services.GetGroupRequest
	29, // 64: Services.ChatService.InviteMember:input_type -> Services.InviteMemberRequest
	31, // 65: Services.ChatService.RemoveMember:input_type -> Services.RemoveMemberRequest
	33, // 66: Services.ChatService.InviteChatbot:input_type -> Services.InviteChatbotRequest
	35, // 67: Services.ChatService.RemoveChatbot:input_type -> Services.RemoveChatbotRequest
	37, // 68: Services.ChatService.MessageStream:input_type -> Services.MessageStreamInit
	45, // 69: Services.ChatService.SendMessage:input_type -> Services.MessageWrapper
	46, // 70: Services.ChatService.ServerEventStream:input_type -> Services.ServerEventStreamInit
	4,  // 71: Services.ChatService.UploadPreKey:output_type -> Services.UploadPreKeyResponse
	6,  // 72: Services.ChatService.FetchPreKey:output_type -> Services.FetchPreKeyResponse
	8,  // 73: Services.ChatService.UploadSignedPreKey:output_type -> Services.UploadSignedPreKeyResponse
	10, // 74: Services.ChatService.FetchSignedPreKey:output_type -> Services.FetchSignedPreKeyResponse
	12, // 75: Services.ChatService.FetchIdentityKey:output_type -> Services.FetchIdentityKeyResponse
	14, // 76: Services.ChatService.UploadMLSKeyPackage:output_type -> Services.UploadMLSKeyPackageResponse
	16, // 77: Services.ChatService.FetchMLSKeyPackage:output_type -> Services.FetchMLSKeyPackageResponse
	20, // 78: Services.ChatService.GetUser:output_type -> Services.GetUserResponse
	18, // 79: Services.ChatService.SetUser:output_type -> Services.SetUserResponse
	24, // 80: Services.ChatService.GetChatbot:output_type -> Services.GetChatbotResponse
	22, // 81: Services.ChatService.SetChatbot:output_type -> Services.SetChatbotResponse
	26, // 82: Services.ChatService.CreateGroup:output_type -> Services.CreateGroupResponse
	28, // 83: Services.ChatService.GetGroup:output_type -> Services.GetGroupResponse
	30, // 84: Services.ChatService.InviteMember:output_type -> Services.InviteMemberResponse
	32, // 85: Services.ChatService.RemoveMember:output_type -> Services.RemoveMemberResponse
	34, // 86: Services.ChatService.InviteChatbot:output_type -> Services.InviteChatbotResponse
	36, // 87: Services.ChatService.RemoveChatbot:output_type -> Services.RemoveChatbotResponse
	45, // 88: Services.ChatService.MessageStream:output_type -> Services.MessageWrapper
	38, // 89: Services.ChatService.SendMessage:output_type -> Services.SendMessageResponse
	53, // 90: Services.ChatService.ServerEventStream:output_type -> Services.ServerEvent
	71, // [71:91] is the sub-list for method output_type
	51, // [51:71] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_protos_services_services_proto_init() }
func file_protos_services_services_proto_init() {
	if File_protos_services_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_services_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPreKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPreKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchPreKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchPreKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSignedPreKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSignedPreKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSignedPreKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSignedPreKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchIdentityKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchIdentityKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMLSKeyPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMLSKeyPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMLSKeyPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMLSKeyPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatbotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatbotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatbotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatbotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteChatbotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteChatbotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChatbotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChatbotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStreamInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatbotMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSideGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderKeyDistributionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PseudonymRegistrationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerEventStreamInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRemoval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatbotInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatbotAddition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatbotRemoval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeKEMUserAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeKEMUserUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeKEMKeyUpdatePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTreeKEMExternalKeyUpdatePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeKEMGroupInitKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECKEMCipherText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECKEMCipherTextMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECKEMCipherTextStringMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_services_services_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeKEMNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_services_services_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*ServerEvent_GroupInvitation)(nil),
		(*ServerEvent_GroupAddition)(nil),
		(*ServerEvent_GroupRemoval)(nil),
		(*ServerEvent_GroupChatbotInvitation)(nil),
		(*ServerEvent_GroupChatbotAddition)(nil),
		(*ServerEvent_GroupChatbotRemoval)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_services_services_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_services_services_proto_goTypes,
		DependencyIndexes: file_protos_services_services_proto_depIdxs,
		EnumInfos:         file_protos_services_services_proto_enumTypes,
		MessageInfos:      file_protos_services_services_proto_msgTypes,
	}.Build()
	File_protos_services_services_proto = out.File
	file_protos_services_services_proto_rawDesc = nil
	file_protos_services_services_proto_goTypes = nil
	file_protos_services_services_proto_depIdxs = nil
}
