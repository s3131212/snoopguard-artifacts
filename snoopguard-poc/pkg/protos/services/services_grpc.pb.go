// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: protos/services/services.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_UploadPreKey_FullMethodName        = "/Services.ChatService/UploadPreKey"
	ChatService_FetchPreKey_FullMethodName         = "/Services.ChatService/FetchPreKey"
	ChatService_UploadSignedPreKey_FullMethodName  = "/Services.ChatService/UploadSignedPreKey"
	ChatService_FetchSignedPreKey_FullMethodName   = "/Services.ChatService/FetchSignedPreKey"
	ChatService_FetchIdentityKey_FullMethodName    = "/Services.ChatService/FetchIdentityKey"
	ChatService_UploadMLSKeyPackage_FullMethodName = "/Services.ChatService/UploadMLSKeyPackage"
	ChatService_FetchMLSKeyPackage_FullMethodName  = "/Services.ChatService/FetchMLSKeyPackage"
	ChatService_GetUser_FullMethodName             = "/Services.ChatService/GetUser"
	ChatService_SetUser_FullMethodName             = "/Services.ChatService/SetUser"
	ChatService_GetChatbot_FullMethodName          = "/Services.ChatService/GetChatbot"
	ChatService_SetChatbot_FullMethodName          = "/Services.ChatService/SetChatbot"
	ChatService_CreateGroup_FullMethodName         = "/Services.ChatService/CreateGroup"
	ChatService_GetGroup_FullMethodName            = "/Services.ChatService/GetGroup"
	ChatService_InviteMember_FullMethodName        = "/Services.ChatService/InviteMember"
	ChatService_RemoveMember_FullMethodName        = "/Services.ChatService/RemoveMember"
	ChatService_InviteChatbot_FullMethodName       = "/Services.ChatService/InviteChatbot"
	ChatService_RemoveChatbot_FullMethodName       = "/Services.ChatService/RemoveChatbot"
	ChatService_MessageStream_FullMethodName       = "/Services.ChatService/MessageStream"
	ChatService_SendMessage_FullMethodName         = "/Services.ChatService/SendMessage"
	ChatService_ServerEventStream_FullMethodName   = "/Services.ChatService/ServerEventStream"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	UploadPreKey(ctx context.Context, in *UploadPreKeyRequest, opts ...grpc.CallOption) (*UploadPreKeyResponse, error)
	FetchPreKey(ctx context.Context, in *FetchPreKeyRequest, opts ...grpc.CallOption) (*FetchPreKeyResponse, error)
	UploadSignedPreKey(ctx context.Context, in *UploadSignedPreKeyRequest, opts ...grpc.CallOption) (*UploadSignedPreKeyResponse, error)
	FetchSignedPreKey(ctx context.Context, in *FetchSignedPreKeyRequest, opts ...grpc.CallOption) (*FetchSignedPreKeyResponse, error)
	FetchIdentityKey(ctx context.Context, in *FetchIdentityKeyRequest, opts ...grpc.CallOption) (*FetchIdentityKeyResponse, error)
	UploadMLSKeyPackage(ctx context.Context, in *UploadMLSKeyPackageRequest, opts ...grpc.CallOption) (*UploadMLSKeyPackageResponse, error)
	FetchMLSKeyPackage(ctx context.Context, in *FetchMLSKeyPackageRequest, opts ...grpc.CallOption) (*FetchMLSKeyPackageResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error)
	GetChatbot(ctx context.Context, in *GetChatbotRequest, opts ...grpc.CallOption) (*GetChatbotResponse, error)
	SetChatbot(ctx context.Context, in *SetChatbotRequest, opts ...grpc.CallOption) (*SetChatbotResponse, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	InviteChatbot(ctx context.Context, in *InviteChatbotRequest, opts ...grpc.CallOption) (*InviteChatbotResponse, error)
	RemoveChatbot(ctx context.Context, in *RemoveChatbotRequest, opts ...grpc.CallOption) (*RemoveChatbotResponse, error)
	MessageStream(ctx context.Context, in *MessageStreamInit, opts ...grpc.CallOption) (ChatService_MessageStreamClient, error)
	SendMessage(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*SendMessageResponse, error)
	ServerEventStream(ctx context.Context, in *ServerEventStreamInit, opts ...grpc.CallOption) (ChatService_ServerEventStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) UploadPreKey(ctx context.Context, in *UploadPreKeyRequest, opts ...grpc.CallOption) (*UploadPreKeyResponse, error) {
	out := new(UploadPreKeyResponse)
	err := c.cc.Invoke(ctx, ChatService_UploadPreKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchPreKey(ctx context.Context, in *FetchPreKeyRequest, opts ...grpc.CallOption) (*FetchPreKeyResponse, error) {
	out := new(FetchPreKeyResponse)
	err := c.cc.Invoke(ctx, ChatService_FetchPreKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UploadSignedPreKey(ctx context.Context, in *UploadSignedPreKeyRequest, opts ...grpc.CallOption) (*UploadSignedPreKeyResponse, error) {
	out := new(UploadSignedPreKeyResponse)
	err := c.cc.Invoke(ctx, ChatService_UploadSignedPreKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchSignedPreKey(ctx context.Context, in *FetchSignedPreKeyRequest, opts ...grpc.CallOption) (*FetchSignedPreKeyResponse, error) {
	out := new(FetchSignedPreKeyResponse)
	err := c.cc.Invoke(ctx, ChatService_FetchSignedPreKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchIdentityKey(ctx context.Context, in *FetchIdentityKeyRequest, opts ...grpc.CallOption) (*FetchIdentityKeyResponse, error) {
	out := new(FetchIdentityKeyResponse)
	err := c.cc.Invoke(ctx, ChatService_FetchIdentityKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UploadMLSKeyPackage(ctx context.Context, in *UploadMLSKeyPackageRequest, opts ...grpc.CallOption) (*UploadMLSKeyPackageResponse, error) {
	out := new(UploadMLSKeyPackageResponse)
	err := c.cc.Invoke(ctx, ChatService_UploadMLSKeyPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchMLSKeyPackage(ctx context.Context, in *FetchMLSKeyPackageRequest, opts ...grpc.CallOption) (*FetchMLSKeyPackageResponse, error) {
	out := new(FetchMLSKeyPackageResponse)
	err := c.cc.Invoke(ctx, ChatService_FetchMLSKeyPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, ChatService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error) {
	out := new(SetUserResponse)
	err := c.cc.Invoke(ctx, ChatService_SetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatbot(ctx context.Context, in *GetChatbotRequest, opts ...grpc.CallOption) (*GetChatbotResponse, error) {
	out := new(GetChatbotResponse)
	err := c.cc.Invoke(ctx, ChatService_GetChatbot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetChatbot(ctx context.Context, in *SetChatbotRequest, opts ...grpc.CallOption) (*SetChatbotResponse, error) {
	out := new(SetChatbotResponse)
	err := c.cc.Invoke(ctx, ChatService_SetChatbot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, ChatService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error) {
	out := new(InviteMemberResponse)
	err := c.cc.Invoke(ctx, ChatService_InviteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, ChatService_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) InviteChatbot(ctx context.Context, in *InviteChatbotRequest, opts ...grpc.CallOption) (*InviteChatbotResponse, error) {
	out := new(InviteChatbotResponse)
	err := c.cc.Invoke(ctx, ChatService_InviteChatbot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveChatbot(ctx context.Context, in *RemoveChatbotRequest, opts ...grpc.CallOption) (*RemoveChatbotResponse, error) {
	out := new(RemoveChatbotResponse)
	err := c.cc.Invoke(ctx, ChatService_RemoveChatbot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) MessageStream(ctx context.Context, in *MessageStreamInit, opts ...grpc.CallOption) (ChatService_MessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_MessageStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_MessageStreamClient interface {
	Recv() (*MessageWrapper, error)
	grpc.ClientStream
}

type chatServiceMessageStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceMessageStreamClient) Recv() (*MessageWrapper, error) {
	m := new(MessageWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ServerEventStream(ctx context.Context, in *ServerEventStreamInit, opts ...grpc.CallOption) (ChatService_ServerEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_ServerEventStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceServerEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ServerEventStreamClient interface {
	Recv() (*ServerEvent, error)
	grpc.ClientStream
}

type chatServiceServerEventStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceServerEventStreamClient) Recv() (*ServerEvent, error) {
	m := new(ServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	UploadPreKey(context.Context, *UploadPreKeyRequest) (*UploadPreKeyResponse, error)
	FetchPreKey(context.Context, *FetchPreKeyRequest) (*FetchPreKeyResponse, error)
	UploadSignedPreKey(context.Context, *UploadSignedPreKeyRequest) (*UploadSignedPreKeyResponse, error)
	FetchSignedPreKey(context.Context, *FetchSignedPreKeyRequest) (*FetchSignedPreKeyResponse, error)
	FetchIdentityKey(context.Context, *FetchIdentityKeyRequest) (*FetchIdentityKeyResponse, error)
	UploadMLSKeyPackage(context.Context, *UploadMLSKeyPackageRequest) (*UploadMLSKeyPackageResponse, error)
	FetchMLSKeyPackage(context.Context, *FetchMLSKeyPackageRequest) (*FetchMLSKeyPackageResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	SetUser(context.Context, *SetUserRequest) (*SetUserResponse, error)
	GetChatbot(context.Context, *GetChatbotRequest) (*GetChatbotResponse, error)
	SetChatbot(context.Context, *SetChatbotRequest) (*SetChatbotResponse, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	InviteChatbot(context.Context, *InviteChatbotRequest) (*InviteChatbotResponse, error)
	RemoveChatbot(context.Context, *RemoveChatbotRequest) (*RemoveChatbotResponse, error)
	MessageStream(*MessageStreamInit, ChatService_MessageStreamServer) error
	SendMessage(context.Context, *MessageWrapper) (*SendMessageResponse, error)
	ServerEventStream(*ServerEventStreamInit, ChatService_ServerEventStreamServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) UploadPreKey(context.Context, *UploadPreKeyRequest) (*UploadPreKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPreKey not implemented")
}
func (UnimplementedChatServiceServer) FetchPreKey(context.Context, *FetchPreKeyRequest) (*FetchPreKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPreKey not implemented")
}
func (UnimplementedChatServiceServer) UploadSignedPreKey(context.Context, *UploadSignedPreKeyRequest) (*UploadSignedPreKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSignedPreKey not implemented")
}
func (UnimplementedChatServiceServer) FetchSignedPreKey(context.Context, *FetchSignedPreKeyRequest) (*FetchSignedPreKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSignedPreKey not implemented")
}
func (UnimplementedChatServiceServer) FetchIdentityKey(context.Context, *FetchIdentityKeyRequest) (*FetchIdentityKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIdentityKey not implemented")
}
func (UnimplementedChatServiceServer) UploadMLSKeyPackage(context.Context, *UploadMLSKeyPackageRequest) (*UploadMLSKeyPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMLSKeyPackage not implemented")
}
func (UnimplementedChatServiceServer) FetchMLSKeyPackage(context.Context, *FetchMLSKeyPackageRequest) (*FetchMLSKeyPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMLSKeyPackage not implemented")
}
func (UnimplementedChatServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedChatServiceServer) SetUser(context.Context, *SetUserRequest) (*SetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedChatServiceServer) GetChatbot(context.Context, *GetChatbotRequest) (*GetChatbotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatbot not implemented")
}
func (UnimplementedChatServiceServer) SetChatbot(context.Context, *SetChatbotRequest) (*SetChatbotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatbot not implemented")
}
func (UnimplementedChatServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedChatServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedChatServiceServer) InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedChatServiceServer) RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedChatServiceServer) InviteChatbot(context.Context, *InviteChatbotRequest) (*InviteChatbotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteChatbot not implemented")
}
func (UnimplementedChatServiceServer) RemoveChatbot(context.Context, *RemoveChatbotRequest) (*RemoveChatbotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatbot not implemented")
}
func (UnimplementedChatServiceServer) MessageStream(*MessageStreamInit, ChatService_MessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageStream not implemented")
}
func (UnimplementedChatServiceServer) SendMessage(context.Context, *MessageWrapper) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) ServerEventStream(*ServerEventStreamInit, ChatService_ServerEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerEventStream not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_UploadPreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UploadPreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UploadPreKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UploadPreKey(ctx, req.(*UploadPreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchPreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchPreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FetchPreKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchPreKey(ctx, req.(*FetchPreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UploadSignedPreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSignedPreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UploadSignedPreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UploadSignedPreKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UploadSignedPreKey(ctx, req.(*UploadSignedPreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchSignedPreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSignedPreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchSignedPreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FetchSignedPreKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchSignedPreKey(ctx, req.(*FetchSignedPreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchIdentityKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchIdentityKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchIdentityKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FetchIdentityKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchIdentityKey(ctx, req.(*FetchIdentityKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UploadMLSKeyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMLSKeyPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UploadMLSKeyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UploadMLSKeyPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UploadMLSKeyPackage(ctx, req.(*UploadMLSKeyPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchMLSKeyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMLSKeyPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchMLSKeyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FetchMLSKeyPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchMLSKeyPackage(ctx, req.(*FetchMLSKeyPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetUser(ctx, req.(*SetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatbot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatbot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatbot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatbot(ctx, req.(*GetChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetChatbot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetChatbot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SetChatbot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetChatbot(ctx, req.(*SetChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_InviteChatbot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).InviteChatbot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_InviteChatbot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).InviteChatbot(ctx, req.(*InviteChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveChatbot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatbotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveChatbot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RemoveChatbot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveChatbot(ctx, req.(*RemoveChatbotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_MessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageStreamInit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).MessageStream(m, &chatServiceMessageStreamServer{stream})
}

type ChatService_MessageStreamServer interface {
	Send(*MessageWrapper) error
	grpc.ServerStream
}

type chatServiceMessageStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceMessageStreamServer) Send(m *MessageWrapper) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*MessageWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ServerEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerEventStreamInit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ServerEventStream(m, &chatServiceServerEventStreamServer{stream})
}

type ChatService_ServerEventStreamServer interface {
	Send(*ServerEvent) error
	grpc.ServerStream
}

type chatServiceServerEventStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceServerEventStreamServer) Send(m *ServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Services.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPreKey",
			Handler:    _ChatService_UploadPreKey_Handler,
		},
		{
			MethodName: "FetchPreKey",
			Handler:    _ChatService_FetchPreKey_Handler,
		},
		{
			MethodName: "UploadSignedPreKey",
			Handler:    _ChatService_UploadSignedPreKey_Handler,
		},
		{
			MethodName: "FetchSignedPreKey",
			Handler:    _ChatService_FetchSignedPreKey_Handler,
		},
		{
			MethodName: "FetchIdentityKey",
			Handler:    _ChatService_FetchIdentityKey_Handler,
		},
		{
			MethodName: "UploadMLSKeyPackage",
			Handler:    _ChatService_UploadMLSKeyPackage_Handler,
		},
		{
			MethodName: "FetchMLSKeyPackage",
			Handler:    _ChatService_FetchMLSKeyPackage_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ChatService_GetUser_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _ChatService_SetUser_Handler,
		},
		{
			MethodName: "GetChatbot",
			Handler:    _ChatService_GetChatbot_Handler,
		},
		{
			MethodName: "SetChatbot",
			Handler:    _ChatService_SetChatbot_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ChatService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _ChatService_GetGroup_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _ChatService_InviteMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _ChatService_RemoveMember_Handler,
		},
		{
			MethodName: "InviteChatbot",
			Handler:    _ChatService_InviteChatbot_Handler,
		},
		{
			MethodName: "RemoveChatbot",
			Handler:    _ChatService_RemoveChatbot_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageStream",
			Handler:       _ChatService_MessageStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerEventStream",
			Handler:       _ChatService_ServerEventStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/services/services.proto",
}
